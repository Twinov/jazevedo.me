{"version":3,"file":"component---src-pages-projects-tsx-560adf788d7feb61c0e5.js","mappings":"6HAEA,IAAeA,EAAU,E,uFCmCzB,OA7BW,6FAGWC,EAAAA,EAAAA,IAAM,WAAU,iEAI3BC,IAAAA,IAAC,QAAEC,GAAS,QACP,WAAZA,GAAuBF,EAAAA,EAAAA,IAAM,UAAWA,EAAAA,EAAAA,IAAM,cAAc,QAE5DG,EAAAA,EAAAA,IAAKC,EAAAA,GAAAA,OAAgB,sBACDC,IAAAA,IAAC,QAAEH,GAAS,QAClB,WAAZA,GACII,EAAAA,EAAAA,IAAY,UAAWF,EAAAA,GAAAA,QACvBG,EAAAA,EAAAA,KAAKD,EAAAA,EAAAA,IAAY,UAAWF,EAAAA,GAAAA,OAAkB,GAAI,oBACzCI,IAAAA,IAAC,QAAEN,GAAS,QACb,WAAZA,EAAuB,6BAA+B,MAAM,SAG9DC,EAAAA,EAAAA,IAAKC,EAAAA,GAAAA,MAAe,sBACAK,IAAAA,IAAC,QAAEP,GAAS,QAClB,WAAZA,GACII,EAAAA,EAAAA,IAAY,UAAWF,EAAAA,GAAAA,OACvBG,EAAAA,EAAAA,KAAKD,EAAAA,EAAAA,IAAY,UAAWF,EAAAA,GAAAA,MAAiB,GAAI,oBACxCM,IAAAA,IAAC,QAAER,GAAS,QACb,WAAZA,EAAuB,6BAA+B,MAAM,S,mBC3BlE,MAAMS,EAAS,CACbC,eAAa,yFAIJC,EAAAA,EAAAA,MAAS,MAeL,SAASD,EAAc,GAKM,IALN,KACpCE,EAAO,GAAE,UACTC,EAAY,GAAE,UACdC,EAAS,MACTC,GACmB,EACnB,OACEC,EAAAA,EAAAA,IAACP,EAAOC,cAAa,CAACI,UAAWA,EAAWC,MAAOA,GAChDH,EAAKK,KAAKC,IACTF,EAAAA,EAAAA,IAACG,EAAK,CAACnB,QAAQ,SAASoB,IAAKF,GAC1BA,KAGJL,EAAUI,KAAKI,IACdL,EAAAA,EAAAA,IAACG,EAAK,CAACnB,QAAQ,SAASoB,IAAKC,GAC1BA,KAKX,C,uKClCA,MAAMZ,EAAS,CACba,SAAO,kBAAAC,OAAAA,YAAA,CACHC,EAAAA,GAAS,gBACIb,EAAAA,EAAAA,MAAS,mBACNA,EAAAA,EAAAA,KAAQ,KAE5Bc,OAAK,aAAAF,OAAAA,YAAA,iDAGcZ,EAAAA,EAAAA,MAAS,qBAG5Be,YAAU,cAAAH,OAAAA,YAAA,gJAKQZ,EAAAA,EAAAA,MAAS,oBACNA,EAAAA,EAAAA,MAAS,0CAI9BgB,aAAaC,EAAAA,EAAAA,GAAOD,EAAAA,EAAW,CAAAJ,OAAAA,YAAlBK,CAAmB,KAiCnB,SAASC,EAAa,GAEK,IAFL,KACnCC,GACkB,EAClB,MAAMC,EAAWD,EAAKE,QAAQC,aAAahB,KAAId,IAAA,IAAC,SAAE+B,GAAU,SAAKA,CAAQ,IACzE,OACElB,EAAAA,EAAAA,IAACmB,EAAAA,EAAM,CAACC,YAAa,CAAEC,QAAS,aAC9BrB,EAAAA,EAAAA,IAACP,EAAOa,QAAO,MACbN,EAAAA,EAAAA,IAACP,EAAOgB,MAAK,KAAC,kBACdT,EAAAA,EAAAA,IAACP,EAAOiB,WAAU,KACfK,EAASd,KAAI,CAACqB,EAASC,KACtBvB,EAAAA,EAAAA,IAACP,EAAOkB,YAAW,CAACW,QAASA,EAASlB,IAAKmB,QAMvD,CAIO,SAASC,IACd,OACExB,EAAAA,EAAAA,IAACyB,EAAAA,EAAI,CACHC,MAAM,WACNC,YAAY,yFAGlB,C","sources":["webpack://jazevedo.me/./src/components/LinkButton/index.ts","webpack://jazevedo.me/./src/components/Topic.tsx","webpack://jazevedo.me/./src/components/ProjectTopics.tsx","webpack://jazevedo.me/./src/pages/projects.tsx"],"sourcesContent":["import LinkButton from \"./LinkButton\";\n\nexport default LinkButton;\n","import styled from \"@emotion/styled\";\nimport { rgba } from \"polished\";\n\nimport { color, ColorMode, hybridColor, mode } from \"../theme/color\";\n\n/**\n * Styled `<span>` component that looks like a pill\n */\nconst Topic = styled.span<{ variant?: \"filled\" | \"hollow\" }>`\n  border-radius: 1000px;\n  padding: 1px 8px;\n  border: 2px solid ${color(\"primary\")};\n  display: inline-block;\n  font-weight: 700;\n  font-size: 0.8rem;\n  color: ${({ variant }): string =>\n    variant === \"filled\" ? color(\"light\") : color(\"text-strong\")};\n\n  ${mode(ColorMode.Light)} {\n    background-color: ${({ variant }): string =>\n      variant === \"filled\"\n        ? hybridColor(\"primary\", ColorMode.Light)\n        : rgba(hybridColor(\"primary\", ColorMode.Light), 0.2)};\n    text-shadow: ${({ variant }): string =>\n      variant === \"filled\" ? \"0 0 4px rgba(0, 0, 0, 0.3)\" : \"none\"};\n  }\n\n  ${mode(ColorMode.Dark)} {\n    background-color: ${({ variant }): string =>\n      variant === \"filled\"\n        ? hybridColor(\"primary\", ColorMode.Dark)\n        : rgba(hybridColor(\"primary\", ColorMode.Dark), 0.4)};\n    text-shadow: ${({ variant }): string =>\n      variant === \"filled\" ? \"0 0 4px rgba(0, 0, 0, 0.7)\" : \"none\"};\n  }\n`;\n\nexport default Topic;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport Topic from \"./Topic\";\nimport { gap } from \"../theme/spacing\";\n\nconst Styled = {\n  ProjectTopics: styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: ${gap.femto};\n  `,\n};\n\nexport type ProjectTopicsProps = {\n  main?: string[];\n  secondary?: string[];\n  className?: string;\n  style?: React.CSSProperties;\n};\n\n/**\n * List of topics, split into \"main\" and \"secondary\",\n * each represented with a pill in a horizontal, wrapping flexbox.\n */\nexport default function ProjectTopics({\n  main = [],\n  secondary = [],\n  className,\n  style,\n}: ProjectTopicsProps): React.ReactElement {\n  return (\n    <Styled.ProjectTopics className={className} style={style}>\n      {main.map((mainTopic) => (\n        <Topic variant=\"filled\" key={mainTopic}>\n          {mainTopic}\n        </Topic>\n      ))}\n      {secondary.map((secondaryTopic) => (\n        <Topic variant=\"hollow\" key={secondaryTopic}>\n          {secondaryTopic}\n        </Topic>\n      ))}\n    </Styled.ProjectTopics>\n  );\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { graphql } from \"gatsby\";\nimport type { PageProps } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport { gap } from \"../theme/spacing\";\nimport { container } from \"../theme/layout\";\nimport type { ProjectCardFragment } from \"../components/ProjectCard/types\";\nimport ProjectCard from \"../components/ProjectCard\";\nimport Meta from \"../components/Meta\";\n\nconst Styled = {\n  Content: styled.article`\n    ${container}\n    padding-top: ${gap.milli};\n    padding-bottom: ${gap.kilo};\n  `,\n  Title: styled.h1`\n    font-weight: 900;\n    font-size: 2rem;\n    margin-bottom: ${gap.micro};\n    line-height: 0.9;\n  `,\n  CardLayout: styled.div`\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    grid-template-rows: repeat(auto-fill, auto);\n    grid-row-gap: ${gap.micro};\n    grid-column-gap: ${gap.micro};\n    grid-auto-flow: row;\n    align-items: start;\n  `,\n  ProjectCard: styled(ProjectCard)``,\n};\n\n// Must stay synchronized with below pageQuery\ntype PageQueryResult = {\n  allFile: {\n    projectFiles: Array<{\n      childMdx: ProjectCardFragment;\n    }>;\n  };\n};\n\nexport const pageQuery = graphql`\n  query {\n    allFile(\n      sort: { childMdx: { frontmatter: { importance: DESC } } }\n      limit: 1000\n      filter: {\n        relativePath: { regex: \"/^[^/]+/index.mdx$/\" }\n        sourceInstanceName: { eq: \"projects\" }\n      }\n    ) {\n      projectFiles: nodes {\n        childMdx {\n          ...ProjectCard\n        }\n      }\n    }\n  }\n`;\n\nexport type ProjectsPageProps = PageProps<PageQueryResult>;\n\nexport default function ProjectsPage({\n  data,\n}: ProjectsPageProps): React.ReactElement {\n  const projects = data.allFile.projectFiles.map(({ childMdx }) => childMdx);\n  return (\n    <Layout headerProps={{ spacing: \"compact\" }}>\n      <Styled.Content>\n        <Styled.Title>Past Projects</Styled.Title>\n        <Styled.CardLayout>\n          {projects.map((project, i) => (\n            <Styled.ProjectCard project={project} key={i} />\n          ))}\n        </Styled.CardLayout>\n      </Styled.Content>\n    </Layout>\n  );\n}\n\n// Gatsby Head component:\n// https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\nexport function Head(): React.ReactElement {\n  return (\n    <Meta\n      title=\"Projects\"\n      description=\"Portfolio of past technical projects I contributed to during my education and career.\"\n    />\n  );\n}\n"],"names":["LinkButton","color","_ref","variant","mode","ColorMode","_ref2","hybridColor","rgba","_ref3","_ref4","_ref5","Styled","ProjectTopics","gap","main","secondary","className","style","___EmotionJSX","map","mainTopic","Topic","key","secondaryTopic","Content","target","container","Title","CardLayout","ProjectCard","_styled","ProjectsPage","data","projects","allFile","projectFiles","childMdx","Layout","headerProps","spacing","project","i","Head","Meta","title","description"],"sourceRoot":""}