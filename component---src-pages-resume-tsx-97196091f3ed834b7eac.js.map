{"version":3,"file":"component---src-pages-resume-tsx-97196091f3ed834b7eac.js","mappings":";gGAAA,OAOC,WACA,aAEA,IAAIA,EAAS,CAAC,EAAEC,eAGhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BL,EAAQM,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IACxB,GAAIA,EAAID,OAAQ,CACf,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACHT,EAAQM,KAAKG,EAEf,OACM,GAAgB,WAAZJ,EAAsB,CAChC,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,WAAaP,EAAIO,SAASA,WAAWG,SAAS,iBAAkB,CACrGd,EAAQM,KAAKF,EAAIO,YACjB,QACD,CAEA,IAAK,IAAII,KAAOX,EACXP,EAAOmB,KAAKZ,EAAKW,IAAQX,EAAIW,IAChCf,EAAQM,KAAKS,EAGhB,CAxBkB,CAyBnB,CAEA,OAAOf,EAAQiB,KAAK,IACrB,CAEqCC,EAAOC,SAC3CpB,EAAWqB,QAAUrB,EACrBmB,EAAOC,QAAUpB,QAKhB,KAFwB,EAAF,WACtB,OAAOA,CACP,UAFoB,OAEpB,YAIH,CApDA,kMCGA,MAAMsB,EAAS,CACbC,QAAQC,EAAAA,EAAAA,GAAOC,EAAAA,EAAU,qBAAjBD,CAAkB,sLAcVE,EAAAA,EAAAA,GAAO,MAAK,mFAKJC,EAAAA,EAAAA,IAAM,WAAU,WAC3BA,EAAAA,EAAAA,IAAM,SAAQ,4BAGHA,EAAAA,EAAAA,IAAM,cAAa,8BAInBA,EAAAA,EAAAA,IAAM,cAAa,yCAKnBC,EAAAA,EAAAA,KAAKD,EAAAA,EAAAA,IAAM,SAAU,IAAI,WACpCA,EAAAA,EAAAA,IAAM,eAAc,8CAITC,EAAAA,EAAAA,KAAKD,EAAAA,EAAAA,IAAM,SAAU,IAAI,8BAIzBC,EAAAA,EAAAA,KAAKD,EAAAA,EAAAA,IAAM,SAAU,IAAI,qTAQZA,EAAAA,EAAAA,IAAM,WAAU,wBAGnCD,EAAAA,EAAAA,GAAO,MAAK,0BAIZA,EAAAA,EAAAA,GAAO,MAAK,uTAqDnBG,EAMT,CACFC,MAAO,CACL,cAAe,OACf,cAAe,MACfC,SAAU,WAEZC,QAAS,CACP,cAAe,OACf,cAAe,QAYJ,SAAST,EAAO,GAMM,IAAD,MANL,QAC7BU,EAAO,UACPC,EAAS,SACTC,EAAQ,MACRC,KACGC,GACS,EAGZ,MAAMC,EAAkBC,EAAAA,SAAAA,IACtBJ,GACCK,GACsB,iBAAVA,GAA2BC,EAAAA,EAAAA,IAAAA,OAAAA,KAAOD,GACtCA,IAIX,OACEC,EAAAA,EAAAA,IAACnB,EAAOC,QAAM,QACZW,UAAWlC,IAAWkC,EAAU,YAAYD,QAAAA,EAAW,UACvDG,MAAO,IACFP,EAA0B,QAAV,EAACQ,EAAKK,YAAI,QAAI,cAC9BN,IAGDC,GAEHC,EAGP,mDC9KA,IAAeb,EAAU","sources":["webpack://jazevedo.me/./node_modules/classnames/index.js","webpack://jazevedo.me/./src/components/Button.tsx","webpack://jazevedo.me/./src/components/LinkButton/index.ts"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { rgba } from \"polished\";\nimport classNames from \"classnames\";\n\nimport { color } from \"../theme/color\";\nimport { shadow } from \"../theme/shadows\";\nimport LinkButton from \"./LinkButton\";\nimport type { LinkButtonProps } from \"./LinkButton/LinkButton\";\n\nconst Styled = {\n  Button: styled(LinkButton)`\n    position: relative;\n    text-decoration: none;\n    border-radius: 4px;\n\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n      display: block !important;\n    }\n\n    box-shadow: ${shadow(\"z1\")};\n    --highlight-bg: transparent;\n    --border-size: 0px;\n\n    &.variant-solid {\n      background-color: ${color(\"primary\")};\n      color: ${color(\"light\")};\n\n      &:hover {\n        --highlight-bg: ${color(\"primary+10\")};\n      }\n\n      &:active {\n        --highlight-bg: ${color(\"primary-10\")};\n      }\n    }\n\n    &.variant-hollow {\n      background-color: ${rgba(color(\"light\"), 0.1)};\n      color: ${color(\"text-strong\")};\n      --border-size: 2px;\n\n      &:hover {\n        --highlight-bg: ${rgba(color(\"light\"), 0.1)};\n      }\n\n      &:active {\n        --highlight-bg: ${rgba(color(\"light\"), 0.2)};\n      }\n    }\n\n    padding-top: calc(var(--y-padding) - calc(var(--border-size) * 2));\n    padding-bottom: calc(var(--y-padding) - calc(var(--border-size) * 2));\n    padding-left: calc(var(--x-padding) - calc(var(--border-size) * 2));\n    padding-right: calc(var(--x-padding) - calc(var(--border-size) * 2));\n    border: var(--border-size) solid ${color(\"primary\")};\n\n    &:hover {\n      box-shadow: ${shadow(\"z2\")};\n    }\n\n    &:active {\n      box-shadow: ${shadow(\"z0\")};\n    }\n\n    /* Use an absolutely positioned pseudo-element\n    that animates between transparent and opaque\n    to simulate the <Button> having a background color transition\n    without creating an ugly transition upon changing themes */\n    &::before {\n      position: absolute;\n      left: 0;\n      top: 0;\n      height: 100%;\n      width: 100%;\n      content: \" \";\n      transition: 0.1s background-color linear;\n      background-color: var(--highlight-bg);\n      border-radius: 4px;\n      z-index: 0;\n    }\n\n    & > * {\n      /* Ensure the pseudo-element is positioned below the content\n      by creating a new stacking context for the content.\n      This relies on always wrapping children in a span.\n      We do this manually in <Button> for direct children,\n      and for <LinkButton>, the text and icon props\n      automatically get wrapped */\n      position: relative;\n    }\n\n    /* When forced-colors are enabled, add a border to improve the contrast\n    of the hit target (the color is ignored). Additionally, add an underline on\n    hover to improve the readability of the states. */\n    @media (forced-colors: active) {\n      border: 2px solid white;\n\n      &:hover,\n      &:active {\n        text-decoration: underline;\n      }\n    }\n  `,\n};\n\nexport type ButtonSize = \"small\" | \"regular\";\n\n/**\n * Style to apply to a <Button> based on its size.\n *\n * This is applied automatically by <Button> based on the `size` prop.\n * These are also exported so that they can be used by other components\n * in advanced selectors.\n */\nexport const buttonSizeStyles: Record<\n  ButtonSize,\n  // Use `Record<string, CSSProperties[keyof CSSProperties]>` instead of\n  // `CSSProperties` because the latter doesn't allow for CSS custom variable\n  // properties (`--*`):\n  Record<string, React.CSSProperties[keyof React.CSSProperties]>\n> = {\n  small: {\n    \"--x-padding\": \"10px\",\n    \"--y-padding\": \"6px\",\n    fontSize: \"0.75rem\",\n  },\n  regular: {\n    \"--x-padding\": \"15px\",\n    \"--y-padding\": \"8px\",\n  },\n};\n\nexport type ButtonProps = LinkButtonProps & {\n  variant?: \"solid\" | \"hollow\" | null;\n  size?: \"small\" | \"regular\";\n};\n\n/**\n * Styled `<LinkButton>` component that looks like a traditional button\n */\nexport default function Button({\n  variant,\n  className,\n  children,\n  style,\n  ...rest\n}: ButtonProps): React.ReactElement {\n  // Manually wrap any text nodes with a <span> element\n  // to ensure that the pseudo-element stacking order works.\n  const derivedChildren = React.Children.map(\n    children,\n    (child): React.ReactNode => {\n      if (typeof child === \"string\") return <span>{child}</span>;\n      return child;\n    }\n  );\n\n  return (\n    <Styled.Button\n      className={classNames(className, `variant-${variant ?? \"solid\"}`)}\n      style={{\n        ...buttonSizeStyles[rest.size ?? \"regular\"],\n        ...style,\n      }}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...rest}\n    >\n      {derivedChildren}\n    </Styled.Button>\n  );\n}\n","import LinkButton from \"./LinkButton\";\n\nexport default LinkButton;\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","Styled","Button","_styled","LinkButton","shadow","color","rgba","buttonSizeStyles","small","fontSize","regular","variant","className","children","style","rest","derivedChildren","React","child","___EmotionJSX","size"],"sourceRoot":""}