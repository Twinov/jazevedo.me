{"version":3,"file":"dd19f40058990cdbf8515bcd6f447257875742d3-68eec298f08c0c9b08a9.js","mappings":"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","sources":["webpack://jazevedo.me/../src/image-utils.ts","webpack://jazevedo.me/../src/components/hooks.ts","webpack://jazevedo.me/../src/components/layout-wrapper.tsx","webpack://jazevedo.me/../src/components/picture.tsx","webpack://jazevedo.me/../src/components/placeholder.tsx","webpack://jazevedo.me/../src/components/main-image.tsx","webpack://jazevedo.me/../src/components/gatsby-image.server.tsx","webpack://jazevedo.me/../src/components/gatsby-image.browser.tsx","webpack://jazevedo.me/../src/components/static-image.server.tsx","webpack://jazevedo.me/../src/components/static-image.tsx","webpack://jazevedo.me/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://jazevedo.me/./src/vendor/stripe-gradient.js","webpack://jazevedo.me/./src/components/StripeGradient.tsx","webpack://jazevedo.me/./src/components/HeroBackground.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","/* eslint-disable */\n\n// Note:\n// Some modifications have been made;\n// minor deobfuscation/de-minification in order to more easily read the code,\n// plus a direct way of setting/resetting the colors was added\n// in order to more easily create an idiomatic React wrapper.\n// (see /src/components/StripeGradient.tsx)\n\n// https://kevinhufnagl.com/wp-content/themes/lightisol/dist/js/min/lightisol-gradient.min.js?ver=1.0\n//\n// Since the original CodePen https://codepen.io/kevinhufnagl/pen/YzwBemd,\n// seems to have been removed by the author I restored this version from\n// the article's markup found at\n// https://kevinhufnagl.com/how-to-stripe-website-gradient-effect/\n\nfunction normalizeColor(hexCode) {\n  return [\n    ((hexCode >> 16) & 255) / 255,\n    ((hexCode >> 8) & 255) / 255,\n    (255 & hexCode) / 255,\n  ];\n}\n\n[\"SCREEN\", \"LINEAR_LIGHT\"].reduce(\n  (hexCode, t, n) => Object.assign(hexCode, { [t]: n }),\n  {}\n);\n\nclass MiniGl {\n  constructor(canvas, width, height, debug = false) {\n    const _miniGl = this;\n    const debug_output =\n      document.location.search.toLowerCase().indexOf(\"debug=webgl\") !== -1;\n    _miniGl.canvas = canvas;\n    _miniGl.gl = _miniGl.canvas.getContext(\"webgl\", { antialias: true });\n    _miniGl.meshes = [];\n\n    const context = _miniGl.gl;\n    width && height && this.setSize(width, height),\n      _miniGl.lastDebugMsg,\n      (_miniGl.debug =\n        debug && debug_output\n          ? function (e) {\n              const t = new Date();\n              t - _miniGl.lastDebugMsg > 1e3 && console.log(\"---\"),\n                console.log(\n                  t.toLocaleTimeString() +\n                    Array(Math.max(0, 32 - e.length)).join(\" \") +\n                    e +\n                    \": \",\n                  ...Array.from(arguments).slice(1)\n                ),\n                (_miniGl.lastDebugMsg = t);\n            }\n          : () => {}),\n      Object.defineProperties(_miniGl, {\n        Material: {\n          enumerable: false,\n          value: class {\n            constructor(vertexShaders, fragments, uniforms = {}) {\n              const material = this;\n              function getShaderByType(type, source) {\n                const shader = context.createShader(type);\n                return (\n                  context.shaderSource(shader, source),\n                  context.compileShader(shader),\n                  context.getShaderParameter(shader, context.COMPILE_STATUS) ||\n                    console.error(context.getShaderInfoLog(shader)),\n                  _miniGl.debug(\"Material.compileShaderSource\", {\n                    source: source,\n                  }),\n                  shader\n                );\n              }\n              function getUniformVariableDeclarations(uniforms, type) {\n                return Object.entries(uniforms)\n                  .map(([uniform, value]) =>\n                    value.getDeclaration(uniform, type)\n                  )\n                  .join(\"\\n\");\n              }\n              (this.uniforms = uniforms), (this.uniformInstances = []);\n              const prefix =\n                \"\\n              precision highp float;\\n            \";\n              (this.vertexSource = `\\n              ${prefix}\\n              attribute vec4 position;\\n              attribute vec2 uv;\\n              attribute vec2 uvNorm;\\n              ${getUniformVariableDeclarations(\n                _miniGl.commonUniforms,\n                \"vertex\"\n              )}\\n              ${getUniformVariableDeclarations(\n                uniforms,\n                \"vertex\"\n              )}\\n              ${vertexShaders}\\n            `),\n                (this.Source = `\\n              ${prefix}\\n              ${getUniformVariableDeclarations(\n                  _miniGl.commonUniforms,\n                  \"fragment\"\n                )}\\n              ${getUniformVariableDeclarations(\n                  uniforms,\n                  \"fragment\"\n                )}\\n              ${fragments}\\n            `),\n                (this.vertexShader = getShaderByType(\n                  context.VERTEX_SHADER,\n                  this.vertexSource\n                )),\n                (this.fragmentShader = getShaderByType(\n                  context.FRAGMENT_SHADER,\n                  this.Source\n                )),\n                (this.program = context.createProgram()),\n                context.attachShader(this.program, this.vertexShader),\n                context.attachShader(this.program, this.fragmentShader),\n                context.linkProgram(this.program),\n                context.getProgramParameter(\n                  this.program,\n                  context.LINK_STATUS\n                ) || console.error(context.getProgramInfoLog(this.program)),\n                context.useProgram(this.program),\n                this.attachUniforms(undefined, _miniGl.commonUniforms),\n                this.attachUniforms(undefined, this.uniforms);\n            }\n            attachUniforms(name, uniforms) {\n              const material = this;\n              undefined === name\n                ? Object.entries(uniforms).forEach(([name, uniform]) => {\n                    material.attachUniforms(name, uniform);\n                  })\n                : \"array\" == uniforms.type\n                ? uniforms.value.forEach((uniform, i) =>\n                    material.attachUniforms(`${name}[${i}]`, uniform)\n                  )\n                : \"struct\" == uniforms.type\n                ? Object.entries(uniforms.value).forEach(([uniform, i]) =>\n                    material.attachUniforms(`${name}.${uniform}`, i)\n                  )\n                : (_miniGl.debug(\"Material.attachUniforms\", {\n                    name: name,\n                    uniform: uniforms,\n                  }),\n                  material.uniformInstances.push({\n                    uniform: uniforms,\n                    location: context.getUniformLocation(\n                      material.program,\n                      name\n                    ),\n                  }));\n            }\n          },\n        },\n        Uniform: {\n          enumerable: false,\n          value: class {\n            constructor(e) {\n              (this.type = \"float\"),\n                Object.assign(this, e),\n                (this.typeFn =\n                  {\n                    float: \"1f\",\n                    int: \"1i\",\n                    vec2: \"2fv\",\n                    vec3: \"3fv\",\n                    vec4: \"4fv\",\n                    mat4: \"Matrix4fv\",\n                  }[this.type] || \"1f\"),\n                this.update();\n            }\n            update(value) {\n              undefined !== this.value &&\n                context[`uniform${this.typeFn}`](\n                  value,\n                  0 === this.typeFn.indexOf(\"Matrix\")\n                    ? this.transpose\n                    : this.value,\n                  0 === this.typeFn.indexOf(\"Matrix\") ? this.value : null\n                );\n            }\n            getDeclaration(name, type, length) {\n              const uniform = this;\n              if (uniform.excludeFrom !== type) {\n                if (\"array\" === uniform.type)\n                  return (\n                    uniform.value[0].getDeclaration(\n                      name,\n                      type,\n                      uniform.value.length\n                    ) + `\\nconst int ${name}_length = ${uniform.value.length};`\n                  );\n                if (\"struct\" === uniform.type) {\n                  let name_no_prefix = name.replace(\"u_\", \"\");\n                  return (\n                    (name_no_prefix =\n                      name_no_prefix.charAt(0).toUpperCase() +\n                      name_no_prefix.slice(1)),\n                    `uniform struct ${name_no_prefix} \\n                                {\\n` +\n                      Object.entries(uniform.value)\n                        .map(([name, uniform]) =>\n                          uniform\n                            .getDeclaration(name, type)\n                            .replace(/^uniform/, \"\")\n                        )\n                        .join(\"\") +\n                      `\\n} ${name}${length > 0 ? `[${length}]` : \"\"};`\n                  );\n                }\n                return `uniform ${uniform.type} ${name}${\n                  length > 0 ? `[${length}]` : \"\"\n                };`;\n              }\n            }\n          },\n        },\n        PlaneGeometry: {\n          enumerable: false,\n          value: class {\n            constructor(width, height, n, i, orientation) {\n              context.createBuffer(),\n                (this.attributes = {\n                  position: new _miniGl.Attribute({\n                    target: context.ARRAY_BUFFER,\n                    size: 3,\n                  }),\n                  uv: new _miniGl.Attribute({\n                    target: context.ARRAY_BUFFER,\n                    size: 2,\n                  }),\n                  uvNorm: new _miniGl.Attribute({\n                    target: context.ARRAY_BUFFER,\n                    size: 2,\n                  }),\n                  index: new _miniGl.Attribute({\n                    target: context.ELEMENT_ARRAY_BUFFER,\n                    size: 3,\n                    type: context.UNSIGNED_SHORT,\n                  }),\n                }),\n                this.setTopology(n, i),\n                this.setSize(width, height, orientation);\n            }\n            setTopology(e = 1, t = 1) {\n              const n = this;\n              (n.xSegCount = e),\n                (n.ySegCount = t),\n                (n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1)),\n                (n.quadCount = n.xSegCount * n.ySegCount * 2),\n                (n.attributes.uv.values = new Float32Array(2 * n.vertexCount)),\n                (n.attributes.uvNorm.values = new Float32Array(\n                  2 * n.vertexCount\n                )),\n                (n.attributes.index.values = new Uint16Array(3 * n.quadCount));\n              for (let e = 0; e <= n.ySegCount; e++)\n                for (let t = 0; t <= n.xSegCount; t++) {\n                  const i = e * (n.xSegCount + 1) + t;\n                  if (\n                    ((n.attributes.uv.values[2 * i] = t / n.xSegCount),\n                    (n.attributes.uv.values[2 * i + 1] = 1 - e / n.ySegCount),\n                    (n.attributes.uvNorm.values[2 * i] =\n                      (t / n.xSegCount) * 2 - 1),\n                    (n.attributes.uvNorm.values[2 * i + 1] =\n                      1 - (e / n.ySegCount) * 2),\n                    t < n.xSegCount && e < n.ySegCount)\n                  ) {\n                    const s = e * n.xSegCount + t;\n                    (n.attributes.index.values[6 * s] = i),\n                      (n.attributes.index.values[6 * s + 1] =\n                        i + 1 + n.xSegCount),\n                      (n.attributes.index.values[6 * s + 2] = i + 1),\n                      (n.attributes.index.values[6 * s + 3] = i + 1),\n                      (n.attributes.index.values[6 * s + 4] =\n                        i + 1 + n.xSegCount),\n                      (n.attributes.index.values[6 * s + 5] =\n                        i + 2 + n.xSegCount);\n                  }\n                }\n              n.attributes.uv.update(),\n                n.attributes.uvNorm.update(),\n                n.attributes.index.update(),\n                _miniGl.debug(\"Geometry.setTopology\", {\n                  uv: n.attributes.uv,\n                  uvNorm: n.attributes.uvNorm,\n                  index: n.attributes.index,\n                });\n            }\n            setSize(width = 1, height = 1, orientation = \"xz\") {\n              const geometry = this;\n              (geometry.width = width),\n                (geometry.height = height),\n                (geometry.orientation = orientation),\n                (geometry.attributes.position.values &&\n                  geometry.attributes.position.values.length ===\n                    3 * geometry.vertexCount) ||\n                  (geometry.attributes.position.values = new Float32Array(\n                    3 * geometry.vertexCount\n                  ));\n              const o = width / -2,\n                r = height / -2,\n                segment_width = width / geometry.xSegCount,\n                segment_height = height / geometry.ySegCount;\n              for (let yIndex = 0; yIndex <= geometry.ySegCount; yIndex++) {\n                const t = r + yIndex * segment_height;\n                for (let xIndex = 0; xIndex <= geometry.xSegCount; xIndex++) {\n                  const r = o + xIndex * segment_width,\n                    l = yIndex * (geometry.xSegCount + 1) + xIndex;\n                  (geometry.attributes.position.values[\n                    3 * l + \"xyz\".indexOf(orientation[0])\n                  ] = r),\n                    (geometry.attributes.position.values[\n                      3 * l + \"xyz\".indexOf(orientation[1])\n                    ] = -t);\n                }\n              }\n              geometry.attributes.position.update(),\n                _miniGl.debug(\"Geometry.setSize\", {\n                  position: geometry.attributes.position,\n                });\n            }\n          },\n        },\n        Mesh: {\n          enumerable: false,\n          value: class {\n            constructor(geometry, material) {\n              const mesh = this;\n              (mesh.geometry = geometry),\n                (mesh.material = material),\n                (mesh.wireframe = false),\n                (mesh.attributeInstances = []),\n                Object.entries(mesh.geometry.attributes).forEach(\n                  ([e, attribute]) => {\n                    mesh.attributeInstances.push({\n                      attribute: attribute,\n                      location: attribute.attach(e, mesh.material.program),\n                    });\n                  }\n                ),\n                _miniGl.meshes.push(mesh),\n                _miniGl.debug(\"Mesh.constructor\", { mesh: mesh });\n            }\n            draw() {\n              context.useProgram(this.material.program),\n                this.material.uniformInstances.forEach(\n                  ({ uniform: e, location: t }) => e.update(t)\n                ),\n                this.attributeInstances.forEach(\n                  ({ attribute: e, location: t }) => e.use(t)\n                ),\n                context.drawElements(\n                  this.wireframe ? context.LINES : context.TRIANGLES,\n                  this.geometry.attributes.index.values.length,\n                  context.UNSIGNED_SHORT,\n                  0\n                );\n            }\n            remove() {\n              _miniGl.meshes = _miniGl.meshes.filter((e) => e != this);\n            }\n          },\n        },\n        Attribute: {\n          enumerable: false,\n          value: class {\n            constructor(e) {\n              (this.type = context.FLOAT),\n                (this.normalized = false),\n                (this.buffer = context.createBuffer()),\n                Object.assign(this, e),\n                this.update();\n            }\n            update() {\n              undefined !== this.values &&\n                (context.bindBuffer(this.target, this.buffer),\n                context.bufferData(\n                  this.target,\n                  this.values,\n                  context.STATIC_DRAW\n                ));\n            }\n            attach(e, t) {\n              const n = context.getAttribLocation(t, e);\n              return (\n                this.target === context.ARRAY_BUFFER &&\n                  (context.enableVertexAttribArray(n),\n                  context.vertexAttribPointer(\n                    n,\n                    this.size,\n                    this.type,\n                    this.normalized,\n                    0,\n                    0\n                  )),\n                n\n              );\n            }\n            use(e) {\n              context.bindBuffer(this.target, this.buffer),\n                this.target === context.ARRAY_BUFFER &&\n                  (context.enableVertexAttribArray(e),\n                  context.vertexAttribPointer(\n                    e,\n                    this.size,\n                    this.type,\n                    this.normalized,\n                    0,\n                    0\n                  ));\n            }\n          },\n        },\n      });\n    const a = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    _miniGl.commonUniforms = {\n      projectionMatrix: new _miniGl.Uniform({ type: \"mat4\", value: a }),\n      modelViewMatrix: new _miniGl.Uniform({ type: \"mat4\", value: a }),\n      resolution: new _miniGl.Uniform({ type: \"vec2\", value: [1, 1] }),\n      aspectRatio: new _miniGl.Uniform({ type: \"float\", value: 1 }),\n    };\n  }\n  setSize(e = 640, t = 480) {\n    (this.width = e),\n      (this.height = t),\n      (this.canvas.width = e),\n      (this.canvas.height = t),\n      this.gl.viewport(0, 0, e, t),\n      (this.commonUniforms.resolution.value = [e, t]),\n      (this.commonUniforms.aspectRatio.value = e / t),\n      this.debug(\"MiniGL.setSize\", { width: e, height: t });\n  }\n  setOrthographicCamera(e = 0, t = 0, n = 0, i = -2e3, s = 2e3) {\n    (this.commonUniforms.projectionMatrix.value = [\n      2 / this.width,\n      0,\n      0,\n      0,\n      0,\n      2 / this.height,\n      0,\n      0,\n      0,\n      0,\n      2 / (i - s),\n      0,\n      e,\n      t,\n      n,\n      1,\n    ]),\n      this.debug(\n        \"setOrthographicCamera\",\n        this.commonUniforms.projectionMatrix.value\n      );\n  }\n\n  render() {\n    this.gl.clearColor(0, 0, 0, 0);\n    this.gl.clearDepth(1);\n    this.meshes.forEach((e) => e.draw());\n  }\n}\n\nfunction defineSymbol(object, propertyName, val) {\n  return (\n    propertyName in object\n      ? Object.defineProperty(object, propertyName, {\n          value: val,\n          enumerable: true,\n          configurable: true,\n          writable: true,\n        })\n      : (object[propertyName] = val),\n    object\n  );\n}\n\nexport class Gradient {\n  el = undefined;\n  cssVarRetries = 0;\n  maxCssVarRetries = 200;\n  angle = 0;\n  isLoadedClass = false;\n  isScrolling = false;\n  scrollingTimeout = undefined;\n  scrollingRefreshDelay = 200;\n  isIntersecting = false;\n  shaderFiles = undefined;\n  vertexShader = undefined;\n  sectionColors = undefined;\n  computedCanvasStyle = undefined;\n  conf = undefined;\n  uniforms = undefined;\n  t = 1253106;\n  last = 0;\n  width = undefined;\n  minWidth = 1111;\n  height = 600;\n  xSegCount = undefined;\n  ySegCount = undefined;\n  mesh = undefined;\n  material = undefined;\n  geometry = undefined;\n  minigl = undefined;\n  scrollObserver = undefined;\n  amp = 320;\n  seed = 5;\n  freqX = 14e-5;\n  freqY = 29e-5;\n  freqDelta = 1e-5;\n  activeColors = [1, 1, 1, 1];\n  isMetaKey = false;\n  isGradientLegendVisible = false;\n  isMouseDown = false;\n  onLoadCallback = null;\n\n  handleScroll = () => {\n    clearTimeout(this.scrollingTimeout),\n      (this.scrollingTimeout = setTimeout(\n        this.handleScrollEnd,\n        this.scrollingRefreshDelay\n      )),\n      this.isGradientLegendVisible && this.hideGradientLegend(),\n      this.conf.playing && ((this.isScrolling = true), this.pause());\n  };\n\n  handleScrollEnd = () => {\n    (this.isScrolling = false), this.isIntersecting && this.play();\n  };\n\n  resize = () => {\n    (this.width = window.innerWidth),\n      this.minigl.setSize(this.width, this.height),\n      this.minigl.setOrthographicCamera(),\n      (this.xSegCount = Math.ceil(this.width * this.conf.density[0])),\n      (this.ySegCount = Math.ceil(this.height * this.conf.density[1])),\n      this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount),\n      this.mesh.geometry.setSize(this.width, this.height),\n      (this.mesh.material.uniforms.u_shadow_power.value =\n        this.width < 600 ? 5 : 6);\n  };\n\n  handleMouseDown = (e) => {\n    this.isGradientLegendVisible &&\n      ((this.isMetaKey = e.metaKey),\n      (this.isMouseDown = true),\n      false === this.conf.playing && requestAnimationFrame(this.animate));\n  };\n\n  handleMouseUp = () => {\n    this.isMouseDown = false;\n  };\n\n  animate = (e) => {\n    if (!this.shouldSkipFrame(e) || this.isMouseDown) {\n      if (\n        ((this.t += Math.min(e - this.last, 1e3 / 15)),\n        (this.last = e),\n        this.isMouseDown)\n      ) {\n        let e = 160;\n        this.isMetaKey && (e = -160), (this.t += e);\n      }\n      (this.mesh.material.uniforms.u_time.value = this.t), this.minigl.render();\n    }\n    if (0 !== this.last && this.isStatic)\n      return this.minigl.render(), void this.disconnect();\n    (this.conf.playing || this.isMouseDown) &&\n      requestAnimationFrame(this.animate);\n  };\n\n  addIsLoadedClass = () => {\n    !this.isLoadedClass &&\n      ((this.isLoadedClass = true),\n      this.el.classList.add(\"isLoaded\"),\n      setTimeout(() => {\n        this.el.parentElement.classList.add(\"isLoaded\");\n      }, 3e3));\n  };\n\n  pause = () => {\n    this.conf.playing = false;\n  };\n\n  play = () => {\n    requestAnimationFrame(() => this.animate());\n    this.conf.playing = true;\n  };\n\n  initGradient = (selector) => {\n    this.el = document.querySelector(selector);\n    this.connect();\n  };\n\n  constructor() {}\n\n  async connect() {\n    this.shaderFiles = {\n      vertex: `\n        varying vec3 v_color;\n\n        void main() {\n          float time = u_time * u_global.noiseSpeed;\n\n          vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\n\n          vec2 st = 1. - uvNorm.xy;\n\n          //\n          // Tilting the plane\n          //\n\n          // Front-to-back tilt\n          float tilt = resolution.y / 2.0 * uvNorm.y;\n\n          // Left-to-right angle\n          float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\n\n          // Up-down shift to offset incline\n          float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\n\n          //\n          // Vertex noise\n          //\n\n          float noise = snoise(vec3(\n            noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\n            noiseCoord.y * u_vertDeform.noiseFreq.y,\n            time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\n          )) * u_vertDeform.noiseAmp;\n\n          // Fade noise to zero at edges\n          noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\n\n          // Clamp to 0\n          noise = max(0.0, noise);\n\n          vec3 pos = vec3(\n            position.x,\n            position.y + tilt + incline + noise - offset,\n            position.z\n          );\n\n          //\n          // Vertex color, to be passed to fragment shader\n          //\n\n          if (u_active_colors[0] == 1.) {\n            v_color = u_baseColor;\n          }\n\n          for (int i = 0; i < u_waveLayers_length; i++) {\n            if (u_active_colors[i + 1] == 1.) {\n              WaveLayers layer = u_waveLayers[i];\n\n              float noise = smoothstep(\n                layer.noiseFloor,\n                layer.noiseCeil,\n                snoise(vec3(\n                  noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\n                  noiseCoord.y * layer.noiseFreq.y,\n                  time * layer.noiseSpeed + layer.noiseSeed\n                )) / 2.0 + 0.5\n              );\n\n              v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\n            }\n          }\n\n          //\n          // Finish\n          //\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n        }`,\n      noise: `\n        //\n        // Description : Array and textureless GLSL 2D/3D/4D simplex\n        //               noise functions.\n        //      Author : Ian McEwan, Ashima Arts.\n        //  Maintainer : stegu\n        //     Lastmod : 20110822 (ijm)\n        //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n        //               Distributed under the MIT License. See LICENSE file.\n        //               https://github.com/ashima/webgl-noise\n        //               https://github.com/stegu/webgl-noise\n        //\n\n        vec3 mod289(vec3 x) {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 mod289(vec4 x) {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 permute(vec4 x) {\n            return mod289(((x*34.0)+1.0)*x);\n        }\n\n        vec4 taylorInvSqrt(vec4 r)\n        {\n          return 1.79284291400159 - 0.85373472095314 * r;\n        }\n\n        float snoise(vec3 v)\n        {\n          const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n          const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n        // First corner\n          vec3 i  = floor(v + dot(v, C.yyy) );\n          vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n        // Other corners\n          vec3 g = step(x0.yzx, x0.xyz);\n          vec3 l = 1.0 - g;\n          vec3 i1 = min( g.xyz, l.zxy );\n          vec3 i2 = max( g.xyz, l.zxy );\n\n          //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n          //   x1 = x0 - i1  + 1.0 * C.xxx;\n          //   x2 = x0 - i2  + 2.0 * C.xxx;\n          //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n          vec3 x1 = x0 - i1 + C.xxx;\n          vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n          vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n        // Permutations\n          i = mod289(i);\n          vec4 p = permute( permute( permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                  + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n          float n_ = 0.142857142857; // 1.0/7.0\n          vec3  ns = n_ * D.wyz - D.xzx;\n\n          vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n          vec4 x_ = floor(j * ns.z);\n          vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n          vec4 x = x_ *ns.x + ns.yyyy;\n          vec4 y = y_ *ns.x + ns.yyyy;\n          vec4 h = 1.0 - abs(x) - abs(y);\n\n          vec4 b0 = vec4( x.xy, y.xy );\n          vec4 b1 = vec4( x.zw, y.zw );\n\n          //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n          //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n          vec4 s0 = floor(b0)*2.0 + 1.0;\n          vec4 s1 = floor(b1)*2.0 + 1.0;\n          vec4 sh = -step(h, vec4(0.0));\n\n          vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n          vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n          vec3 p0 = vec3(a0.xy,h.x);\n          vec3 p1 = vec3(a0.zw,h.y);\n          vec3 p2 = vec3(a1.xy,h.z);\n          vec3 p3 = vec3(a1.zw,h.w);\n\n        //Normalise gradients\n          vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n          p0 *= norm.x;\n          p1 *= norm.y;\n          p2 *= norm.z;\n          p3 *= norm.w;\n\n        // Mix final noise value\n          vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n          m = m * m;\n          return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                        dot(p2,x2), dot(p3,x3) ) );\n        }`,\n      blend: `\n        //\n        // https://github.com/jamieowen/glsl-blend\n        //\n\n        // Normal\n\n        vec3 blendNormal(vec3 base, vec3 blend) {\n          return blend;\n        }\n\n        vec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n          return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Screen\n\n        float blendScreen(float base, float blend) {\n          return 1.0-((1.0-base)*(1.0-blend));\n        }\n\n        vec3 blendScreen(vec3 base, vec3 blend) {\n          return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n        }\n\n        vec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n          return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Multiply\n\n        vec3 blendMultiply(vec3 base, vec3 blend) {\n          return base*blend;\n        }\n\n        vec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n          return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Overlay\n\n        float blendOverlay(float base, float blend) {\n          return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n        }\n\n        vec3 blendOverlay(vec3 base, vec3 blend) {\n          return vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\n        }\n\n        vec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n          return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Hard light\n\n        vec3 blendHardLight(vec3 base, vec3 blend) {\n          return blendOverlay(blend,base);\n        }\n\n        vec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n          return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Soft light\n\n        float blendSoftLight(float base, float blend) {\n          return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n        }\n\n        vec3 blendSoftLight(vec3 base, vec3 blend) {\n          return vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\n        }\n\n        vec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n          return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Color dodge\n\n        float blendColorDodge(float base, float blend) {\n          return (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n        }\n\n        vec3 blendColorDodge(vec3 base, vec3 blend) {\n          return vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\n        }\n\n        vec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n          return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Color burn\n\n        float blendColorBurn(float base, float blend) {\n          return (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n        }\n\n        vec3 blendColorBurn(vec3 base, vec3 blend) {\n          return vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\n        }\n\n        vec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n          return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Vivid Light\n\n        float blendVividLight(float base, float blend) {\n          return (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\n        }\n\n        vec3 blendVividLight(vec3 base, vec3 blend) {\n          return vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\n        }\n\n        vec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n          return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Lighten\n\n        float blendLighten(float base, float blend) {\n          return max(blend,base);\n        }\n\n        vec3 blendLighten(vec3 base, vec3 blend) {\n          return vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\n        }\n\n        vec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n          return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Linear burn\n\n        float blendLinearBurn(float base, float blend) {\n          // Note : Same implementation as BlendSubtractf\n          return max(base+blend-1.0,0.0);\n        }\n\n        vec3 blendLinearBurn(vec3 base, vec3 blend) {\n          // Note : Same implementation as BlendSubtract\n          return max(base+blend-vec3(1.0),vec3(0.0));\n        }\n\n        vec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n          return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Linear dodge\n\n        float blendLinearDodge(float base, float blend) {\n          // Note : Same implementation as BlendAddf\n          return min(base+blend,1.0);\n        }\n\n        vec3 blendLinearDodge(vec3 base, vec3 blend) {\n          // Note : Same implementation as BlendAdd\n          return min(base+blend,vec3(1.0));\n        }\n\n        vec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n          return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n        }\n\n        // Linear light\n\n        float blendLinearLight(float base, float blend) {\n          return blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\n        }\n\n        vec3 blendLinearLight(vec3 base, vec3 blend) {\n          return vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\n        }\n\n        vec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n          return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n        }`,\n      fragment: `\n        varying vec3 v_color;\n\n        void main() {\n          vec3 color = v_color;\n          if (u_darken_top == 1.0) {\n            vec2 st = gl_FragCoord.xy/resolution.xy;\n            color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\n          }\n          gl_FragColor = vec4(color, 1.0);\n        }`,\n    };\n\n    this.conf = {\n      presetName: \"\",\n      wireframe: false,\n      density: [0.06, 0.16],\n      zoom: 1,\n      rotation: 0,\n      playing: true,\n    };\n\n    if (document.querySelectorAll(\"canvas\").length < 1) {\n      console.log(\"DID NOT LOAD HERO STRIPE CANVAS\");\n    } else {\n      this.minigl = new MiniGl(this.el, null, null, false);\n\n      requestAnimationFrame(() => {\n        if (this.el) {\n          this.computedCanvasStyle = getComputedStyle(this.el);\n          this.waitForCssVars();\n        }\n      });\n    }\n  }\n\n  disconnect() {\n    this.scrollObserver &&\n      (window.removeEventListener(\"scroll\", this.handleScroll),\n      window.removeEventListener(\"mousedown\", this.handleMouseDown),\n      window.removeEventListener(\"mouseup\", this.handleMouseUp),\n      window.removeEventListener(\"keydown\", this.handleKeyDown),\n      this.scrollObserver.disconnect()),\n      window.removeEventListener(\"resize\", this.resize);\n  }\n\n  initMaterial() {\n    this.uniforms = {\n      u_time: new this.minigl.Uniform({ value: 0 }),\n      u_shadow_power: new this.minigl.Uniform({ value: 5 }),\n      u_darken_top: new this.minigl.Uniform({\n        value: \"\" === this.el.dataset.jsDarkenTop ? 1 : 0,\n      }),\n      u_active_colors: new this.minigl.Uniform({\n        value: this.activeColors,\n        type: \"vec4\",\n      }),\n      u_global: new this.minigl.Uniform({\n        value: {\n          noiseFreq: new this.minigl.Uniform({\n            value: [this.freqX, this.freqY],\n            type: \"vec2\",\n          }),\n          noiseSpeed: new this.minigl.Uniform({ value: 5e-6 }),\n        },\n        type: \"struct\",\n      }),\n      u_vertDeform: new this.minigl.Uniform({\n        value: {\n          incline: new this.minigl.Uniform({\n            value: Math.sin(this.angle) / Math.cos(this.angle),\n          }),\n          offsetTop: new this.minigl.Uniform({ value: -0.5 }),\n          offsetBottom: new this.minigl.Uniform({ value: -0.5 }),\n          noiseFreq: new this.minigl.Uniform({ value: [3, 4], type: \"vec2\" }),\n          noiseAmp: new this.minigl.Uniform({ value: this.amp }),\n          noiseSpeed: new this.minigl.Uniform({ value: 10 }),\n          noiseFlow: new this.minigl.Uniform({ value: 3 }),\n          noiseSeed: new this.minigl.Uniform({ value: this.seed }),\n        },\n        type: \"struct\",\n        excludeFrom: \"fragment\",\n      }),\n      u_baseColor: new this.minigl.Uniform({\n        value: this.sectionColors[0],\n        type: \"vec3\",\n        excludeFrom: \"fragment\",\n      }),\n      u_waveLayers: new this.minigl.Uniform({\n        value: [],\n        excludeFrom: \"fragment\",\n        type: \"array\",\n      }),\n    };\n    for (let e = 1; e < this.sectionColors.length; e += 1)\n      this.uniforms.u_waveLayers.value.push(\n        new this.minigl.Uniform({\n          value: {\n            color: new this.minigl.Uniform({\n              value: this.sectionColors[e],\n              type: \"vec3\",\n            }),\n            noiseFreq: new this.minigl.Uniform({\n              value: [\n                2 + e / this.sectionColors.length,\n                3 + e / this.sectionColors.length,\n              ],\n              type: \"vec2\",\n            }),\n            noiseSpeed: new this.minigl.Uniform({ value: 11 + 0.3 * e }),\n            noiseFlow: new this.minigl.Uniform({ value: 6.5 + 0.3 * e }),\n            noiseSeed: new this.minigl.Uniform({ value: this.seed + 10 * e }),\n            noiseFloor: new this.minigl.Uniform({ value: 0.1 }),\n            noiseCeil: new this.minigl.Uniform({ value: 0.63 + 0.07 * e }),\n          },\n          type: \"struct\",\n        })\n      );\n    return (\n      (this.vertexShader = [\n        this.shaderFiles.noise,\n        this.shaderFiles.blend,\n        this.shaderFiles.vertex,\n      ].join(\"\\n\\n\")),\n      new this.minigl.Material(\n        this.vertexShader,\n        this.shaderFiles.fragment,\n        this.uniforms\n      )\n    );\n  }\n\n  initMesh() {\n    (this.material = this.initMaterial()),\n      (this.geometry = new this.minigl.PlaneGeometry()),\n      (this.mesh = new this.minigl.Mesh(this.geometry, this.material));\n  }\n\n  shouldSkipFrame(e) {\n    return (\n      !!window.document.hidden ||\n      !this.conf.playing ||\n      parseInt(e, 10) % 2 == 0 ||\n      undefined\n    );\n  }\n\n  updateFrequency(e) {\n    (this.freqX += e), (this.freqY += e);\n  }\n\n  toggleColor(index) {\n    this.activeColors[index] = 0 === this.activeColors[index] ? 1 : 0;\n  }\n\n  showGradientLegend() {\n    this.width > this.minWidth &&\n      ((this.isGradientLegendVisible = true),\n      document.body.classList.add(\"isGradientLegendVisible\"));\n  }\n\n  hideGradientLegend() {\n    (this.isGradientLegendVisible = false),\n      document.body.classList.remove(\"isGradientLegendVisible\");\n  }\n\n  init() {\n    this.initMesh();\n    this.resize();\n    requestAnimationFrame(this.animate);\n    window.addEventListener(\"resize\", this.resize);\n  }\n\n  waitForCssVars() {\n    // only wait for CSS variables if the colors haven't already been given\n    if (this.sectionColors && this.sectionColors.length > 0) {\n      this.init();\n      this.addIsLoadedClass();\n      if (this.onLoadCallback != null) {\n        this.onLoadCallback();\n      }\n    } else if (\n      this.computedCanvasStyle &&\n      this.computedCanvasStyle.getPropertyValue(colorCssVar(0)).indexOf(\"#\") !==\n        -1\n    ) {\n      this.initGradientColors();\n      this.init();\n      this.addIsLoadedClass();\n      if (this.onLoadCallback != null) {\n        this.onLoadCallback();\n      }\n    } else {\n      // Enqueue another retry\n      this.cssVarRetries += 1;\n      if (this.cssVarRetries > this.maxCssVarRetries) {\n        this.sectionColors = [16711680, 16711680, 16711935, 65280, 255];\n        this.init();\n      } else {\n        requestAnimationFrame(() => this.waitForCssVars());\n      }\n    }\n  }\n\n  initGradientColors() {\n    this.setGradientColors(\n      [0, 1, 2, 3]\n        .map(colorCssVar)\n        .map((cssPropertyName) => {\n          let hex = this.computedCanvasStyle\n            .getPropertyValue(cssPropertyName)\n            .trim();\n          if (4 === hex.length) {\n            const hexTemp = hex\n              .substr(1)\n              .split(\"\")\n              .map((hexTemp) => hexTemp + hexTemp)\n              .join(\"\");\n            hex = `#${hexTemp}`;\n          }\n          return hex && hex;\n        })\n        .filter(Boolean)\n    );\n  }\n\n  setGradientColors(hexColors) {\n    this.sectionColors = hexColors\n      .map((hex) => `0x${hex.substr(1)}`)\n      .map(normalizeColor);\n    // If setting colors after the gradient has already started, init again\n    if (this.isLoadedClass) {\n      this.initMesh();\n      this.resize();\n    }\n  }\n\n  setOnLoadCallback(callback) {\n    this.onLoadCallback = callback;\n  }\n}\n\nexport function colorCssVar(i) {\n  return `--gradient-color-${i + 1}`;\n}\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport { Gradient } from \"../vendor/stripe-gradient\";\nimport { useInitialRender } from \"../hooks\";\n\nlet nextID = 0;\nfunction uniqueId(): string {\n  const id = String(nextID);\n  nextID += 1;\n  return id;\n}\n\nexport type StripeGradientProps = {\n  colors: string[];\n  onLoad?: () => void;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\n/**\n * Displays an animated wavy background,\n * using a Canvas and Stripe's Gradient class\n * to render the background using WebGL:\n * https://kevinhufnagl.com/how-to-stripe-website-gradient-effect/\n *\n * `colors` should be stable between renders\n * when its elements don't change,\n * otherwise the canvas will be unnecessarily re-initialized.\n */\nexport default function StripeGradient({\n  colors,\n  onLoad,\n  className,\n  style,\n}: StripeGradientProps): React.ReactElement | null {\n  // We want to skip rendering this upon first render,\n  // since the unique ID created in the state\n  // might otherwise be different between server-side-rendering\n  // and initial client render;\n  const initialRender = useInitialRender();\n  const gradientRef = useRef<Gradient | null>(null);\n\n  const [id] = useState(() => uniqueId());\n  const canvasId = `gradient-canvas-${id}`;\n\n  useEffect(() => {\n    // Skip effects on the initial render\n    if (initialRender) return;\n\n    // If the second layout effect hasn't yet run, skip this.\n    // This code only should run when the color changes post-initialization\n    // (the initial gradient initialization will handle the initial colors).\n    if (gradientRef.current == null) return;\n\n    // Otherwise, update the colors\n    gradientRef.current.setGradientColors(colors);\n  }, [initialRender, colors]);\n\n  useEffect(() => {\n    // Skip effects on the initial render\n    if (initialRender) return;\n\n    const gradient = new Gradient();\n    gradient.setGradientColors(colors);\n    if (onLoad != null) {\n      gradient.setOnLoadCallback(() => {\n        window.setTimeout(() => onLoad(), 0);\n      });\n    }\n    gradientRef.current = gradient;\n\n    // Make the gradient initialization (can be heavy) low-priority:\n    window.requestIdleCallback(\n      () => {\n        gradient.initGradient(`#${canvasId}`);\n      },\n      { timeout: 1000 }\n    );\n\n    // This hook should only run once upon mounting:\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialRender]);\n\n  if (initialRender) return null;\n  return <canvas id={canvasId} className={className} style={style} />;\n}\n","import React, { useCallback, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { rgba } from \"polished\";\n\nimport {\n  hybridColor,\n  ColorMode,\n  mode,\n  heroGradientColors,\n} from \"../theme/color\";\nimport StripeGradient from \"./StripeGradient\";\nimport { useColorMode, useMediaQuery } from \"../hooks\";\n\nfunction enumKeys<O extends object, K extends keyof O = keyof O>(obj: O): K[] {\n  return Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[];\n}\n\nconst Styled = {\n  HeroLayout: styled.div`\n    display: grid;\n    height: min(100%, 100vh);\n    width: 100%;\n    z-index: -1;\n    user-select: none;\n\n    ${mode(ColorMode.Light)} {\n      .dark-fallback {\n        display: none;\n      }\n    }\n\n    ${mode(ColorMode.Dark)} {\n      .light-fallback {\n        display: none;\n      }\n    }\n\n    /* When forced-colors are enabled, hide the background */\n    @media (forced-colors: active) {\n      .dark-fallback,\n      .light-fallback {\n        display: none;\n      }\n    }\n  `,\n  HeroGradient: styled(StripeGradient)`\n    opacity: 0;\n    transition: opacity 2.5s linear;\n    &.hero-gradient-loaded {\n      opacity: 1;\n    }\n\n    /* When forced-colors or prefers-reduced-motion are enabled, hide the\n    canvas. This is also done in script, but duplicate it here. */\n    @media (forced-colors: active) {\n      display: none;\n    }\n    @media (prefers-reduced-motion: reduce) {\n      display: none;\n    }\n  `,\n  HeroMask: styled.div`\n    height: 100%;\n\n    /* Construct the wave-like mask and full-screen color overlay,\n    using partially-faded background color values for all color modes.\n    Previously, this used a PNG mask to accomplish the wave shape,\n    but having it all in CSS reduces the data transferred\n    and makes it a lot easier to change the colors */\n    ${enumKeys(ColorMode)\n      .map(\n        (key) => `\n          ${mode(ColorMode[key])} {\n            background-color:\n              ${rgba(hybridColor(\"bg\", ColorMode[key]), 0.3)};\n            background-image: linear-gradient(\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)},\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)} 30%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 1)} 95%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 1)}\n              ),\n              radial-gradient(\n                circle 40vw at right 20% bottom 0%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0.8)},\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)}\n              ),\n              radial-gradient(\n                circle 40vw at right 20% bottom 30%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0.8)},\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)}\n              ),\n              radial-gradient(\n                circle 40vw at right 20% bottom 40%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0.8)},\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)}\n              ),\n              radial-gradient(\n                circle 35vw at left -5% bottom 0%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0.8)},\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)}\n              ),\n              radial-gradient(\n                circle 35vw at left -5% bottom 5%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0.8)},\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)}\n              ),\n              radial-gradient(\n                circle 35vw at left 50% bottom 0%,\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0.5)},\n                ${rgba(hybridColor(\"bg\", ColorMode[key]), 0)}\n              );\n          }`\n      )\n      .join(\"\\n\")}\n\n    /* When forced-colors are enabled, hide the background */\n    @media (forced-colors: active) {\n      display: none;\n    }\n  `,\n};\n\nexport type HeroBackgroundProps = {\n  className?: string;\n  style?: React.CSSProperties;\n};\n\n/**\n * Displays an animated wavy background,\n * using a Canvas and Stripe's Gradient class\n * to render the background using WebGL:\n * https://kevinhufnagl.com/how-to-stripe-website-gradient-effect/\n *\n * While loading, the background uses blurred Gatsby images\n * as a placeholder, and then smoothly fades\n * the animated canvas in once it's ready.\n */\nexport default function HeroBackground({\n  className,\n  style,\n}: HeroBackgroundProps): React.ReactElement {\n  // Disable the animated gradient if the agent prefers reduced motion,\n  // or if a forced color/high contrast mode is enabled.\n  // The gradient always returns `null` on its first render (i.e. renders\n  // nothing to the DOM), so it's safe to render the component on the first\n  // render without worrying about hydration inconsistencies.\n  const reducedMotion = useMediaQuery(\"(prefers-reduced-motion: reduce)\");\n  const usingForcedColor = useMediaQuery(\"(forced-colors: active)\");\n  const renderGradientCanvas = !usingForcedColor && !reducedMotion;\n\n  // This gets passed to the gradient component. As a result, it's safe\n  // to use this value without gating it on the initial render (for the same\n  // reason as above).\n  const colorMode = useColorMode();\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const onLoad = useCallback(() => {\n    setIsLoaded(true);\n  }, []);\n\n  return (\n    <Styled.HeroLayout className={className} style={style}>\n      <StaticImage\n        className=\"dark-fallback\"\n        style={{\n          gridArea: \"1/1\",\n          zIndex: 0,\n          userSelect: \"none\",\n        }}\n        layout=\"fullWidth\"\n        alt=\"\"\n        src=\"../images/hero/fallback.dark.png\"\n        placeholder=\"blurred\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        quality={60}\n        draggable={false}\n      />\n      <StaticImage\n        className=\"light-fallback\"\n        style={{\n          gridArea: \"1/1\",\n          zIndex: 0,\n          userSelect: \"none\",\n        }}\n        layout=\"fullWidth\"\n        alt=\"\"\n        src=\"../images/hero/fallback.light.png\"\n        placeholder=\"blurred\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        quality={60}\n        draggable={false}\n      />\n      {renderGradientCanvas && (\n        <Styled.HeroGradient\n          colors={heroGradientColors[colorMode]}\n          className={isLoaded ? \"hero-gradient-loaded\" : \"\"}\n          onLoad={onLoad}\n          style={{\n            gridArea: \"1/1\",\n            height: \"100%\",\n            width: \"100%\",\n            zIndex: 1,\n          }}\n        />\n      )}\n      <Styled.HeroMask style={{ gridArea: \"1/1\", zIndex: 2 }} />\n    </Styled.HeroLayout>\n  );\n}\n"],"names":["height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","srcSet","decoding","undefined","fallback","t","s","sizes","Image","length","map","media","type","key","fallbackImage","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","as","className","class","preactClass","onStartLoad","onLoad","onError","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__imageData","imageData","__error","console","StaticImage","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","normalizeColor","hexCode","reduce","n","MiniGl","canvas","debug","_miniGl","this","debug_output","document","location","search","indexOf","gl","getContext","antialias","meshes","context","setSize","lastDebugMsg","e","Date","log","toLocaleTimeString","Math","max","from","arguments","defineProperties","Material","enumerable","value","vertexShaders","fragments","uniforms","getShaderByType","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","getUniformVariableDeclarations","entries","uniform","getDeclaration","uniformInstances","prefix","vertexSource","commonUniforms","Source","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","attachUniforms","name","material","forEach","push","getUniformLocation","Uniform","typeFn","float","int","vec2","vec3","vec4","mat4","update","transpose","excludeFrom","name_no_prefix","PlaneGeometry","orientation","createBuffer","attributes","Attribute","target","ARRAY_BUFFER","size","uv","uvNorm","index","ELEMENT_ARRAY_BUFFER","UNSIGNED_SHORT","setTopology","xSegCount","ySegCount","vertexCount","quadCount","values","Float32Array","Uint16Array","geometry","o","r","segment_width","segment_height","yIndex","xIndex","l","Mesh","mesh","wireframe","attributeInstances","attribute","attach","draw","use","drawElements","LINES","TRIANGLES","remove","FLOAT","normalized","buffer","bindBuffer","bufferData","STATIC_DRAW","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","a","projectionMatrix","modelViewMatrix","resolution","aspectRatio","viewport","setOrthographicCamera","render","clearColor","clearDepth","Gradient","el","cssVarRetries","maxCssVarRetries","angle","isLoadedClass","isScrolling","scrollingTimeout","scrollingRefreshDelay","isIntersecting","shaderFiles","sectionColors","computedCanvasStyle","conf","last","minWidth","minigl","scrollObserver","amp","seed","freqX","freqY","freqDelta","activeColors","isMetaKey","isGradientLegendVisible","isMouseDown","onLoadCallback","handleScroll","clearTimeout","handleScrollEnd","hideGradientLegend","playing","pause","play","resize","window","innerWidth","ceil","density","u_shadow_power","handleMouseDown","metaKey","animate","handleMouseUp","shouldSkipFrame","min","u_time","isStatic","disconnect","addIsLoadedClass","classList","parentElement","initGradient","selector","connect","async","vertex","noise","blend","fragment","presetName","zoom","rotation","querySelectorAll","getComputedStyle","waitForCssVars","handleKeyDown","initMaterial","u_darken_top","dataset","jsDarkenTop","u_active_colors","u_global","noiseFreq","noiseSpeed","u_vertDeform","incline","sin","cos","offsetTop","offsetBottom","noiseAmp","noiseFlow","noiseSeed","u_baseColor","u_waveLayers","color","noiseFloor","noiseCeil","initMesh","hidden","parseInt","updateFrequency","toggleColor","showGradientLegend","body","init","getPropertyValue","colorCssVar","initGradientColors","setGradientColors","cssPropertyName","hex","hexTemp","substr","split","Boolean","hexColors","setOnLoadCallback","callback","nextID","StripeGradient","colors","initialRender","useInitialRender","gradientRef","id","useState","String","uniqueId","canvasId","gradient","requestIdleCallback","timeout","___EmotionJSX","Styled","HeroLayout","mode","ColorMode","HeroGradient","_styled","HeroMask","obj","keys","k","Number","isNaN","rgba","hybridColor","HeroBackground","reducedMotion","useMediaQuery","renderGradientCanvas","colorMode","useColorMode","setIsLoaded","useCallback","gridArea","zIndex","userSelect","formats","quality","draggable","heroGradientColors"],"sourceRoot":""}