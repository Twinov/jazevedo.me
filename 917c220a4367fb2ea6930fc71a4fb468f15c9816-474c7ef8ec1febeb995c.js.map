{"version":3,"file":"917c220a4367fb2ea6930fc71a4fb468f15c9816-474c7ef8ec1febeb995c.js","mappings":"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","sources":["webpack://jazevedo.me/./node_modules/classnames/index.js","webpack://jazevedo.me/./src/components/Button.tsx","webpack://jazevedo.me/./src/components/Figure.tsx","webpack://jazevedo.me/./src/components/Iframe.tsx","webpack://jazevedo.me/./src/components/LinkButton/index.ts","webpack://jazevedo.me/./src/components/CodeBlock.tsx","webpack://jazevedo.me/./src/components/Mdx.tsx","webpack://jazevedo.me/./src/components/Topic.tsx","webpack://jazevedo.me/./src/components/ProjectTopics.tsx","webpack://jazevedo.me/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { rgba } from \"polished\";\nimport classNames from \"classnames\";\n\nimport { color } from \"../theme/color\";\nimport { shadow } from \"../theme/shadows\";\nimport LinkButton from \"./LinkButton\";\nimport { LinkButtonProps } from \"./LinkButton/LinkButton\";\n\nconst Styled = {\n  Button: styled(LinkButton)`\n    position: relative;\n    text-decoration: none;\n    border-radius: 4px;\n\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n      display: block !important;\n    }\n\n    box-shadow: ${shadow(\"z1\")};\n    --highlight-bg: transparent;\n    --border-size: 0px;\n\n    &.variant-solid {\n      background-color: ${color(\"primary\")};\n      color: ${color(\"light\")};\n\n      &:hover {\n        --highlight-bg: ${color(\"primary+10\")};\n      }\n\n      &:active {\n        --highlight-bg: ${color(\"primary-10\")};\n      }\n    }\n\n    &.variant-hollow {\n      background-color: ${rgba(color(\"light\"), 0.1)};\n      color: ${color(\"text-strong\")};\n      --border-size: 2px;\n\n      &:hover {\n        --highlight-bg: ${rgba(color(\"light\"), 0.1)};\n      }\n\n      &:active {\n        --highlight-bg: ${rgba(color(\"light\"), 0.2)};\n      }\n    }\n\n    padding-top: calc(var(--y-padding) - calc(var(--border-size) * 2));\n    padding-bottom: calc(var(--y-padding) - calc(var(--border-size) * 2));\n    padding-left: calc(var(--x-padding) - calc(var(--border-size) * 2));\n    padding-right: calc(var(--x-padding) - calc(var(--border-size) * 2));\n    border: var(--border-size) solid ${color(\"primary\")};\n\n    &:hover {\n      box-shadow: ${shadow(\"z2\")};\n    }\n\n    &:active {\n      box-shadow: ${shadow(\"z0\")};\n    }\n\n    /* Use an absolutely positioned pseudo-element\n    that animates between transparent and opaque\n    to simulate the <Button> having a background color transition\n    without creating an ugly transition upon changing themes */\n    &::before {\n      position: absolute;\n      left: 0;\n      top: 0;\n      height: 100%;\n      width: 100%;\n      content: \" \";\n      transition: 0.1s background-color linear;\n      background-color: var(--highlight-bg);\n      border-radius: 4px;\n      z-index: 0;\n    }\n\n    & > * {\n      /* Ensure the pseudo-element is positioned below the content\n      by creating a new stacking context for the content.\n      This relies on always wrapping children in a span.\n      We do this manually in <Button> for direct children,\n      and for <LinkButton>, the text and icon props\n      automatically get wrapped */\n      position: relative;\n    }\n\n    /* When forced-colors are enabled, add a border to improve the contrast\n    of the hit target (the color is ignored). Additionally, add an underline on\n    hover to improve the readability of the states. */\n    @media (forced-colors: active) {\n      border: 2px solid white;\n\n      &:hover,\n      &:active {\n        text-decoration: underline;\n      }\n    }\n  `,\n};\n\nexport type ButtonSize = \"small\" | \"regular\";\n\n/**\n * Style to apply to a <Button> based on its size.\n *\n * This is applied automatically by <Button> based on the `size` prop.\n * These are also exported so that they can be used by other components\n * in advanced selectors.\n */\nexport const buttonSizeStyles: Record<\n  ButtonSize,\n  // Use `Record<string, CSSProperties[keyof CSSProperties]>` instead of\n  // `CSSProperties` because the latter doesn't allow for CSS custom variable\n  // properties (`--*`):\n  Record<string, React.CSSProperties[keyof React.CSSProperties]>\n> = {\n  small: {\n    \"--x-padding\": \"10px\",\n    \"--y-padding\": \"6px\",\n    fontSize: \"0.75rem\",\n  },\n  regular: {\n    \"--x-padding\": \"15px\",\n    \"--y-padding\": \"8px\",\n  },\n};\n\nexport type ButtonProps = LinkButtonProps & {\n  variant?: \"solid\" | \"hollow\" | null;\n  size?: \"small\" | \"regular\";\n};\n\n/**\n * Styled `<LinkButton>` component that looks like a traditional button\n */\nexport default function Button({\n  variant,\n  className,\n  children,\n  style,\n  ...rest\n}: ButtonProps): React.ReactElement {\n  // Manually wrap any text nodes with a <span> element\n  // to ensure that the pseudo-element stacking order works.\n  const derivedChildren = React.Children.map(\n    children,\n    (child): React.ReactNode => {\n      if (typeof child === \"string\") return <span>{child}</span>;\n      return child;\n    }\n  );\n\n  return (\n    <Styled.Button\n      className={classNames(className, `variant-${variant ?? \"solid\"}`)}\n      style={{\n        ...buttonSizeStyles[rest.size ?? \"regular\"],\n        ...style,\n      }}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...rest}\n    >\n      {derivedChildren}\n    </Styled.Button>\n  );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styled from \"@emotion/styled\";\n\nimport { color } from \"../theme/color\";\nimport { shadow } from \"../theme/shadows\";\n\nconst Styled = {\n  Figure: styled.figure`\n    /* Make the figure as wide as the contained image, if any.:\n    https://stackoverflow.com/a/19113067\n    This is only needed if 'size-to-content' is set on the figure,\n    but it's easier to use the same strategy all the time and just set\n    'width: 100%' when 'size-to-content' is not set. (causing the figure to fully\n    expand, subject to max-width).\n    This means that to get a background, border radius, and box-shadow\n    around the caption and figure together, each needs to be applied separately. */\n    display: table;\n    --figure-background-color: ${color(\"bg+15\")};\n    --figure-border-radius: var(--img-border-radius);\n    --figure-box-shadow: ${shadow(\"z2\")};\n\n    &:not(.size-to-content) {\n      /* Make the figure as wide as the surroundings, subject to any max-width\n      set on the figure itself. */\n      width: 100%;\n    }\n\n    /* Apply common styles to the \"display-table\" part of the figure\n    (i.e. figure, excluding the caption).\n    This will have a top rounded border, but a bottom square border. */\n    background-color: var(--figure-background-color);\n    border-top-left-radius: var(--figure-border-radius);\n    border-top-right-radius: var(--figure-border-radius);\n    box-shadow: var(--figure-box-shadow);\n\n    position: relative;\n\n    /* Fix a link inside figure content, containing an image, from taking up\n    its own vertical space and showing a sliver of its background. */\n    & > a > img {\n      display: block;\n    }\n\n    /* Select the first child.\n    HACK: use workaround for Emotion 10 not supporting :first-child:\n    https://github.com/emotion-js/emotion/issues/1105#issuecomment-1126025608 */\n    & > :first-of-type:not(style):not(:first-of-type ~ *),\n    & > style + * {\n      /* Make the first image in the figure have a top rounded border.\n      Include 3 cases: standard Gatsby image, plain image, and plain image\n      in a link. */\n      & > a > img,\n      & > img,\n      & .gatsby-resp-image-wrapper {\n        overflow: hidden;\n        border-top-left-radius: var(--figure-border-radius);\n        border-top-right-radius: var(--figure-border-radius);\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n    }\n\n    /* Style the caption */\n    figcaption {\n      display: table-caption;\n      caption-side: bottom;\n\n      /* Apply common styles to the \"display-table-caption\" part of the figure\n      (i.e. the figure, excluding the content).\n      This will have a bottom rounded border, but a top square border. */\n      /* overflow: hidden; */\n      background-color: var(--figure-background-color);\n      border-bottom-left-radius: var(--figure-border-radius);\n      border-bottom-right-radius: var(--figure-border-radius);\n      box-shadow: var(--figure-box-shadow);\n\n      padding: 10px 16px;\n      color: ${color(\"text\")};\n\n      /* Ensure that this is on top of the figure, so that the box-shadow\n      from the content of the figure is not visible */\n      position: relative;\n      z-index: 1;\n\n      /* When forced-colors are enabled, manually add a border\n      (the color is ignored) */\n      @media (forced-colors: active) {\n        border: solid 1px white;\n      }\n\n      & > :last-child {\n        /* Remove the margin-bottom from the last child of the figure caption */\n        margin-bottom: 0;\n      }\n    }\n\n    & > :last-child {\n      /* Remove the margin-bottom from the last child of the figure */\n      margin-bottom: 0;\n    }\n\n    &.centered {\n      margin-left: auto;\n      margin-right: auto;\n    }\n\n    & .gatsby-resp-image-wrapper {\n      /* Remove the default box shadow and border radius */\n      box-shadow: none;\n      /* This will get overriden by the first-child selector above */\n      border-radius: 0;\n    }\n  `,\n};\n\nexport type FigureProps = {\n  children?: React.ReactNode;\n  centered?: boolean;\n  sizeToContent?: boolean;\n  maxWidth?: number;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nexport default function Figure({\n  children,\n  centered = false,\n  sizeToContent = false,\n  maxWidth = 1260,\n  className,\n  style,\n}: FigureProps): React.ReactElement {\n  return (\n    <Styled.Figure\n      className={classNames(className, {\n        centered,\n        \"size-to-content\": sizeToContent,\n      })}\n      style={{ maxWidth, ...style }}\n    >\n      {children}\n    </Styled.Figure>\n  );\n}\n","import styled from \"@emotion/styled\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst Styled = {\n  Wrapper: styled.div`\n    position: relative;\n    height: 0;\n    overflow: hidden;\n  `,\n  Iframe: styled.iframe`\n    border: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  `,\n};\n\n/**\n * CSS Class to target iframe wrapper elements in `<Article />` components.\n */\nexport const iframeClass = \"iframe-article-block\";\n\nexport type IframeProps = {\n  src: string;\n  className?: string;\n  style?: React.CSSProperties;\n  width: number;\n  height: number;\n  allowFullScreen?: boolean;\n};\n\n/**\n * Responsive iframe wrapper.\n */\nexport default function Iframe({\n  src,\n  className,\n  style,\n  width,\n  height,\n  allowFullScreen = false,\n}: IframeProps): React.ReactElement {\n  return (\n    <Styled.Wrapper\n      style={{\n        width: \"100%\",\n        maxWidth: \"none\",\n        paddingBottom: `${(height / width) * 100}%`,\n        ...style,\n      }}\n      className={classNames(\"iframe-article-block\", className)}\n    >\n      <Styled.Iframe\n        src={src}\n        width={width}\n        height={height}\n        allowFullScreen={allowFullScreen}\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...({\n          mozallowfullscreen: allowFullScreen,\n          webkitallowfullscreen: allowFullScreen,\n        } as React.IframeHTMLAttributes<HTMLIFrameElement>)}\n      />\n    </Styled.Wrapper>\n  );\n}\n","import LinkButton from \"./LinkButton\";\n\nexport default LinkButton;\n","import styled from \"@emotion/styled\";\n\nimport { scrollBarAuto } from \"../theme/mixins\";\n\n/**\n * Styled `<pre>` element that automatically styles Prism-highlighted content.\n */\nconst CodeBlock = styled.pre`\n  position: relative;\n  margin: 0;\n\n  /* Important required to override one-{dark,light} theme files:\n  (included in /src/components/GlobalCss.tsx) */\n  padding: 0 !important;\n  background-color: transparent !important;\n\n  & > code {\n    font-size: 1rem;\n  }\n\n  ${scrollBarAuto(0.125)}\n  overflow: auto;\n\n  /* When forced-colors are enabled, the pre element already has a border\n  (due to the invisible 1px border added in the one-{dark,light} theme files).\n  Add padding internal to the element to improve the aesthetics of the border. */\n  @media (forced-colors: active) {\n    /* Important required to override above important: */\n    padding: 16px !important;\n  }\n`;\n\nexport default CodeBlock;\n","import { MDXProvider } from \"@mdx-js/react\";\nimport React, { useMemo } from \"react\";\nimport type { MDXComponents } from \"mdx/types\";\n\nimport Figure from \"./Figure\";\nimport Icon from \"./Icon\";\nimport LinkButton from \"./LinkButton/LinkButton\";\nimport CodeBlock from \"./CodeBlock\";\nimport Iframe from \"./Iframe\";\n\n// Shortcodes available to MDX content\nexport const shortcodes: MDXComponents = {\n  Figure,\n  Icon,\n  Iframe,\n} as const;\n\n// React components that replace HTML components in the markdown\nexport const overrides: MDXComponents = {\n  a: LinkButton as React.ComponentType<JSX.IntrinsicElements[\"a\"]>,\n  pre: CodeBlock as React.ComponentType<JSX.IntrinsicElements[\"pre\"]>,\n};\n\nexport type MdxProps = {\n  children: React.ReactNode;\n  components?: MDXComponents;\n};\n\n/**\n * MDX component provider, including shortcodes used when writing MDX\n */\nexport default function Mdx({\n  children,\n  components,\n}: MdxProps): React.ReactElement {\n  const componentsMemo = useMemo<MDXComponents>(\n    () => ({ ...shortcodes, ...overrides, ...components }),\n    [components]\n  );\n  return <MDXProvider components={componentsMemo}>{children}</MDXProvider>;\n}\n","import styled from \"@emotion/styled\";\nimport { rgba } from \"polished\";\n\nimport { color, ColorMode, hybridColor, mode } from \"../theme/color\";\n\n/**\n * Styled `<span>` component that looks like a pill\n */\nconst Topic = styled.span<{ variant?: \"filled\" | \"hollow\" }>`\n  border-radius: 1000px;\n  padding: 1px 8px;\n  border: 2px solid ${color(\"primary\")};\n  display: inline-block;\n  font-weight: 700;\n  font-size: 0.8rem;\n  color: ${({ variant }): string =>\n    variant === \"filled\" ? color(\"light\") : color(\"text-strong\")};\n\n  ${mode(ColorMode.Light)} {\n    background-color: ${({ variant }): string =>\n      variant === \"filled\"\n        ? hybridColor(\"primary\", ColorMode.Light)\n        : rgba(hybridColor(\"primary\", ColorMode.Light), 0.2)};\n    text-shadow: ${({ variant }): string =>\n      variant === \"filled\" ? \"0 0 4px rgba(0, 0, 0, 0.3)\" : \"none\"};\n  }\n\n  ${mode(ColorMode.Dark)} {\n    background-color: ${({ variant }): string =>\n      variant === \"filled\"\n        ? hybridColor(\"primary\", ColorMode.Dark)\n        : rgba(hybridColor(\"primary\", ColorMode.Dark), 0.4)};\n    text-shadow: ${({ variant }): string =>\n      variant === \"filled\" ? \"0 0 4px rgba(0, 0, 0, 0.7)\" : \"none\"};\n  }\n`;\n\nexport default Topic;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport Topic from \"./Topic\";\nimport { gap } from \"../theme/spacing\";\n\nconst Styled = {\n  ProjectTopics: styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: ${gap.femto};\n  `,\n};\n\nexport type ProjectTopicsProps = {\n  main?: string[];\n  secondary?: string[];\n  className?: string;\n  style?: React.CSSProperties;\n};\n\n/**\n * List of topics, split into \"main\" and \"secondary\",\n * each represented with a pill in a horizontal, wrapping flexbox.\n */\nexport default function ProjectTopics({\n  main = [],\n  secondary = [],\n  className,\n  style,\n}: ProjectTopicsProps): React.ReactElement {\n  return (\n    <Styled.ProjectTopics className={className} style={style}>\n      {main.map((mainTopic) => (\n        <Topic variant=\"filled\" key={mainTopic}>\n          {mainTopic}\n        </Topic>\n      ))}\n      {secondary.map((secondaryTopic) => (\n        <Topic variant=\"hollow\" key={secondaryTopic}>\n          {secondaryTopic}\n        </Topic>\n      ))}\n    </Styled.ProjectTopics>\n  );\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","Styled","Button","_styled","LinkButton","shadow","color","rgba","buttonSizeStyles","small","fontSize","regular","variant","className","children","style","rest","derivedChildren","React","child","___EmotionJSX","size","Figure","centered","sizeToContent","maxWidth","Wrapper","Iframe","iframeClass","src","width","height","allowFullScreen","paddingBottom","mozallowfullscreen","webkitallowfullscreen","scrollBarAuto","shortcodes","Icon","overrides","a","pre","CodeBlock","Mdx","components","componentsMemo","useMemo","MDXProvider","_ref","mode","ColorMode","_ref2","hybridColor","_ref3","_ref4","_ref5","ProjectTopics","gap","main","secondary","map","mainTopic","Topic","secondaryTopic","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}