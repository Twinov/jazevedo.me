{"version":3,"file":"e78d9258-de7584a906d263c59e6b.js","mappings":"2MAiBA,MAAMA,EAAS,CACbC,cAAY,iHAKDC,EAAAA,EAAAA,MAAS,oBAGhBC,EAAAA,EAAAA,IAAK,MAAK,8BAIdC,OAAK,sGAEiBC,EAAAA,EAAAA,IAAM,SAAQ,kCAEpBC,EAAAA,EAAAA,GAAO,MAAK,KAExBH,EAAAA,EAAAA,IAAK,MAAK,+CAIVA,EAAAA,EAAAA,IAAK,MAAK,wEAUdI,QAAM,+HAMOL,EAAAA,EAAAA,KAAQ,QACZA,EAAAA,EAAAA,KAAQ,qFAajBM,aAAW,0KASXC,qBAAmB,qIAMVP,EAAAA,EAAAA,KAAQ,wFAWjBQ,0BAAwB,+MAYxBC,2BAAyB,2OAWzBC,yBAAyBC,EAAAA,EAAAA,GAAOC,EAAAA,EAAe,qBAAtBD,CAAuB,gBAC9BX,EAAAA,EAAAA,MAAS,6CAI3Ba,YAAU,4CACCb,EAAAA,EAAAA,KAAQ,0HAOnBc,UAAQ,iGAICd,EAAAA,EAAAA,KAAQ,KAEjBe,eAAa,sEAEFZ,EAAAA,EAAAA,IAAM,cAAa,qCAI9Ba,eAAa,4FAqBf,MAAMC,EARN,SAAsB,GAAsD,IAAtD,SAAEC,GAA6B,EACnD,OAAOC,EAAAA,EAAAA,IAACrB,EAAOC,aAAY,KAAEmB,EAC/B,EAoIA,SAASE,EAAaC,GAEpB,MACE,IACA,CAACA,EAASC,IAAKD,EAASE,MAAOF,EAASG,MACrCC,KAAKC,IACJ,MAAMC,EAAMD,EAAEE,SAAS,IAAIC,cAC3B,OAAsB,IAAfF,EAAIG,OAAe,IAAMH,EAAMA,CAAG,IAE1CI,KAAK,GAEZ,CAEA,SAASC,EAAUX,GACjB,MAAO,CAACA,EAASC,IAAKD,EAASE,MAAOF,EAASG,MAAMO,KAAK,KAC5D,CASA,SAASE,EAAUZ,GACjB,MAAMK,EAAI,EAAIL,EAASC,IAAM,IACvBY,EAAI,EAAIb,EAASE,MAAQ,IACzBY,EAAI,EAAId,EAASG,KAAO,IACxBY,EAAIC,KAAKC,IAAIZ,EAAGQ,EAAGC,GACzB,MAAO,CACLI,MAAOb,EAAIU,IAAM,EAAIA,GACrBI,SAAUN,EAAIE,IAAM,EAAIA,GACxBK,QAASN,EAAIC,IAAM,EAAIA,GACvBM,MAAON,EAEX,CAWA,SAASO,EAAStB,GAChB,MAAMuB,EAAIvB,EAASC,IAAM,IACnBuB,EAAIxB,EAASE,MAAQ,IACrBuB,EAAIzB,EAASG,KAAO,IACpBuB,EAAMV,KAAKU,IAAIH,EAAGC,EAAGC,GACrBR,EAAMD,KAAKC,IAAIM,EAAGC,EAAGC,GACrBE,GAAKD,EAAMT,GAAO,EACxB,GAAIS,IAAQT,EACV,MAAO,CAAEW,IAAK,EAAGC,WAAY,EAAGC,UAAWH,GAE7C,MAAMI,EAAIL,EAAMT,EACVe,EAAIL,EAAI,GAAMI,GAAK,EAAIL,EAAMT,GAAOc,GAAKL,EAAMT,GACrD,IAAIgB,EACJ,OAAQP,GACN,KAAKH,EACHU,GAAKT,EAAIC,GAAKM,GAAKP,EAAIC,EAAI,EAAI,GAC/B,MACF,KAAKD,EACHS,GAAKR,EAAIF,GAAKQ,EAAI,EAClB,MACF,KAAKN,EACHQ,GAAKV,EAAIC,GAAKO,EAAI,EAClB,MACF,QACE,MAAM,IAAIG,MAAM,wBAEpB,MAAO,CAAEN,IAAKK,EAAI,EAAGJ,WAAYG,EAAGF,UAAWH,EACjD,CArMA/B,EAAsBf,MAwBtB,SAAe,GAKqB,IAJlCC,MAAOqD,EAAS,KAChBC,EAAI,UACJC,EAAS,MACTC,GACW,EACX,MAAMC,GAAsCC,EAAAA,EAAAA,IAAWL,GACvD,GAAI,UAAWI,EACb,MAAM,IAAIL,MAAM,mCAElB,MAAMlC,EAAqBuC,EAKrBE,EAA8B,CAClC,CAAEC,MAAO,OAAQC,MAAOP,GACxB,CAAEM,MAAO,MAAOC,MAAO5C,EAAaC,IACpC,CAAE0C,MAAO,MAAOC,MAAOhC,EAAUX,IACjC,CAAE0C,MAAO,OAAQC,OAsHDC,EAtHmBhC,EAAUZ,GAuHxC,CACLgB,KAAK6B,MAAuB,IAAjBD,EAAU1B,MACrBF,KAAK6B,MAA0B,IAApBD,EAAUzB,SACrBH,KAAK6B,MAAyB,IAAnBD,EAAUxB,QACrBJ,KAAK6B,MAAwB,IAAlBD,EAAUvB,QACrBX,KAAK,QA3HL,CAAEgC,MAAO,MAAOC,OA2JDG,EA3JkBxB,EAAStB,GA4JrC,CACLgB,KAAK6B,MAAqB,IAAfC,EAASlB,KACpBZ,KAAK6B,MAA4B,IAAtBC,EAASjB,YACpBb,KAAK6B,MAA2B,IAArBC,EAAShB,YACpBpB,KAAK,SA7JDqC,EAAQ,UACR1B,EAAQ,UACR2B,GAAgCC,EAAAA,EAAAA,IACpCd,EACAY,GAEIG,GAAgCD,EAAAA,EAAAA,IACpCd,EACAd,GAQI8B,EAA8C,CAClD,CACEC,OAAQJ,EAAcK,GACtBvE,MAAOiE,EACPO,KAAM,QACNZ,MAAO,MAET,CACEU,OAAQJ,EAAcO,QACtBzE,MAAOiE,EACPO,KAAM,QACNZ,MAAO,YAET,CACEU,OAAQF,EAAcG,GACtBvE,MAAOuC,EACPiC,KAAM,QACNZ,MAAO,MAET,CACEU,OAAQF,EAAcK,QACtBzE,MAAOuC,EACPiC,KAAM,QACNZ,MAAO,aAiHb,IAAmBI,EAtCnB,IAAoBF,EAxElB,OACE9C,EAAAA,EAAAA,IAACrB,EAAOI,MAAK,CAACwD,UAAWA,EAAWC,MAAOA,IACzCxC,EAAAA,EAAAA,IAACrB,EAAOO,OAAM,MACZc,EAAAA,EAAAA,IAACrB,EAAOQ,YAAW,CAACqD,MAAO,CAAEkB,gBAAiBrB,KAC7CgB,EAAqB/C,KACpB,CAAC,EAAyCqD,KAAC,IAA1C,OAAEL,EAAQtE,MAAO4E,EAAO,KAAEJ,EAAI,MAAEZ,GAAO,SACtC5C,EAAAA,EAAAA,IAACrB,EAAOS,oBAAmB,CAACyE,IAAKF,IAC/B3D,EAAAA,EAAAA,IAACrB,EAAOU,yBAAwB,CAC9B,YAAWmE,EACXhB,MAAO,CAAExD,MAAO4E,IAEfhB,IAEH5C,EAAAA,EAAAA,IAACrB,EAAOW,0BAAyB,CAAC,cAAagE,IAC7CtD,EAAAA,EAAAA,IAACrB,EAAOY,wBAAuB,CAC7BuE,KAAMR,EAASS,EAAAA,IAAUC,EAAAA,MAE1BV,EAAS,OAAS,QAEM,MAInCtD,EAAAA,EAAAA,IAACrB,EAAOe,WAAU,KACfiD,EAAWrC,KAAI2D,IAAAA,IAAC,MAAErB,EAAK,MAAEC,GAAO,SAC/B7C,EAAAA,EAAAA,IAACrB,EAAOgB,SAAQ,CAACkE,IAAKjB,IACpB5C,EAAAA,EAAAA,IAACrB,EAAOiB,cAAa,KAAEgD,IACvB5C,EAAAA,EAAAA,IAACrB,EAAOkB,cAAa,KAAEgD,GACP,KAK5B,EAzHA,K","sources":["webpack://jazevedo.me/./src/components/ColorDisplay.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { meetsContrastGuidelines, parseToRgb } from \"polished\";\nimport type {\n  ContrastScores,\n  HslColor,\n  RgbaColor,\n  RgbColor,\n} from \"polished/lib/types/color\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { gap } from \"../theme/spacing\";\nimport { shadow } from \"../theme/shadows\";\nimport { color } from \"../theme/color\";\nimport { down } from \"../theme/media\";\n\nconst Styled = {\n  ColorDisplay: styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    flex-wrap: wrap;\n    --gap: ${gap.micro};\n    gap: var(--gap);\n\n    ${down(\"sm\")} {\n      gap: var(--site-padding);\n    }\n  `,\n  Color: styled.div`\n    width: calc(33.333% - (var(--gap) * (2 / 3)));\n    background-color: ${color(\"bg+15\")};\n    border-radius: 8px;\n    box-shadow: ${shadow(\"z2\")};\n\n    ${down(\"lg\")} {\n      width: calc(50% - (var(--gap) * (1 / 2)));\n    }\n\n    ${down(\"sm\")} {\n      width: 100%;\n    }\n\n    /* When forced-colors are enabled, manually add a border\n    (the color is ignored) */\n    @media (forced-colors: active) {\n      border: 1px solid white;\n    }\n  `,\n  Swatch: styled.div`\n    width: 100%;\n    height: 120px;\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    padding: ${gap.nano};\n    gap: ${gap.pico};\n    position: relative;\n\n    /* When forced-colors are enabled, manually add a border\n    (the color is ignored) */\n    @media (forced-colors: active) {\n      border-bottom: 1px solid white;\n    }\n  `,\n  // HACK: use an inner <svg> tag to get the background color to show up\n  // in the color swatch, even when forced-colors are enabled. This is bypassing\n  // the accessibility overrides, so be careful to ensure all text elements\n  // appear above forced-color backgrounds.\n  SwatchColor: styled.svg`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n  `,\n  AccessibilityRating: styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    justify-content: flex-end;\n    width: 65px;\n    gap: ${gap.atto};\n    position: relative;\n    z-index: 1;\n\n    /* When forced-colors are enabled, add a fake background-color section\n    that will get overridden by the forced-colors background color.\n    This ensures that contrast is maintained for the text despite the svg hack */\n    @media (forced-colors: active) {\n      background-color: white;\n    }\n  `,\n  AccessibilityRatingLabel: styled.div`\n    align-self: center;\n    font-weight: 600;\n    line-height: 1;\n    text-align: center;\n    &[data-size=\"small\"] {\n      font-size: 0.75rem;\n    }\n    &[data-size=\"large\"] {\n      font-size: 0.9rem;\n    }\n  `,\n  AccessibilityRatingResult: styled.div`\n    font-size: 0.9rem;\n    padding: 0 0 1px;\n    color: white;\n    background-color: rgba(0, 0, 0, 0.7);\n    border-radius: 4px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n  `,\n  AccessibilityRatingIcon: styled(FontAwesomeIcon)`\n    margin-right: ${gap.femto};\n    font-size: 90%;\n    transform: translateY(1px);\n  `,\n  Properties: styled.div`\n    --gap: ${gap.nano};\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(108px, 1fr));\n    gap: var(--gap);\n    padding: var(--gap);\n  `,\n  Property: styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    gap: ${gap.atto};\n  `,\n  PropertyLabel: styled.div`\n    text-transform: uppercase;\n    color: ${color(\"text-faint\")};\n    font-size: 0.75rem;\n    line-height: 1;\n  `,\n  PropertyValue: styled.div`\n    font-size: 1rem;\n    line-height: 1;\n  `,\n};\n\nexport type ColorDisplayProps = {\n  children: React.ReactNode;\n};\n\n/**\n * Container for multiple `<ColorDisplay.Color />` components.\n */\nfunction ColorDisplay({ children }: ColorDisplayProps): React.ReactElement {\n  return <Styled.ColorDisplay>{children}</Styled.ColorDisplay>;\n}\n\n// Set up and export the aggregate (parent & sub-components):\ntype ColorDisplayAggregateType = typeof ColorDisplay & {\n  Color: typeof Color;\n};\nconst ColorDisplayAggregate: ColorDisplayAggregateType =\n  ColorDisplay as ColorDisplayAggregateType;\nColorDisplayAggregate.Color = Color;\nexport default ColorDisplayAggregate;\n\n// ? --------------\n// ? Sub Components\n// ? --------------\n\nexport type ColorProps = {\n  /**\n   * Must be a valid CSS color string, and be parse-able by `polished`'s\n   * `parseToRgb` function.\n   */\n  color: string;\n  name: string;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\n/**\n * Displays a color swatch with a name. Also includes the accessibility\n * scores for the color as a background color for white/black foregrounds.\n *\n * Based on https://specimens.lekoarts.de/#color-swatch\n */\nfunction Color({\n  color: colorProp,\n  name,\n  className,\n  style,\n}: ColorProps): React.ReactElement {\n  const maybeRgbColor: RgbColor | RgbaColor = parseToRgb(colorProp);\n  if (\"alpha\" in maybeRgbColor) {\n    throw new Error(\"Alpha values are not supported.\");\n  }\n  const rgbColor: RgbColor = maybeRgbColor;\n  type ColorProperty = {\n    label: string;\n    value: string;\n  };\n  const properties: ColorProperty[] = [\n    { label: \"Name\", value: name },\n    { label: \"Hex\", value: formatRgbHex(rgbColor) },\n    { label: \"RGB\", value: formatRgb(rgbColor) },\n    { label: \"CMYK\", value: formatCmyk(rgbToCmyk(rgbColor)) },\n    { label: \"HSL\", value: formatHsl(rgbToHsl(rgbColor)) },\n  ];\n\n  const white = \"#ffffff\";\n  const black = \"#000000\";\n  const whiteContrast: ContrastScores = meetsContrastGuidelines(\n    colorProp,\n    white\n  );\n  const blackContrast: ContrastScores = meetsContrastGuidelines(\n    colorProp,\n    black\n  );\n  type AccessibilityRating = {\n    passes: boolean;\n    color: string;\n    size: \"small\" | \"large\";\n    label: string;\n  };\n  const accessibilityRatings: AccessibilityRating[] = [\n    {\n      passes: whiteContrast.AA,\n      color: white,\n      size: \"small\",\n      label: \"AA\",\n    },\n    {\n      passes: whiteContrast.AALarge,\n      color: white,\n      size: \"large\",\n      label: \"AA Large\",\n    },\n    {\n      passes: blackContrast.AA,\n      color: black,\n      size: \"small\",\n      label: \"AA\",\n    },\n    {\n      passes: blackContrast.AALarge,\n      color: black,\n      size: \"large\",\n      label: \"AA Large\",\n    },\n  ];\n  return (\n    <Styled.Color className={className} style={style}>\n      <Styled.Swatch>\n        <Styled.SwatchColor style={{ backgroundColor: colorProp }} />\n        {accessibilityRatings.map(\n          ({ passes, color: fgColor, size, label }, i) => (\n            <Styled.AccessibilityRating key={i}>\n              <Styled.AccessibilityRatingLabel\n                data-size={size}\n                style={{ color: fgColor }}\n              >\n                {label}\n              </Styled.AccessibilityRatingLabel>\n              <Styled.AccessibilityRatingResult data-passes={passes}>\n                <Styled.AccessibilityRatingIcon\n                  icon={passes ? faCheck : faTimes}\n                />\n                {passes ? \"Pass\" : \"Fail\"}\n              </Styled.AccessibilityRatingResult>\n            </Styled.AccessibilityRating>\n          )\n        )}\n      </Styled.Swatch>\n      <Styled.Properties>\n        {properties.map(({ label, value }) => (\n          <Styled.Property key={label}>\n            <Styled.PropertyLabel>{label}</Styled.PropertyLabel>\n            <Styled.PropertyValue>{value}</Styled.PropertyValue>\n          </Styled.Property>\n        ))}\n      </Styled.Properties>\n    </Styled.Color>\n  );\n}\n\nfunction formatRgbHex(rgbColor: RgbColor): string {\n  /* eslint-disable prefer-template */\n  return (\n    \"#\" +\n    [rgbColor.red, rgbColor.green, rgbColor.blue]\n      .map((c) => {\n        const hex = c.toString(16).toUpperCase();\n        return hex.length === 1 ? \"0\" + hex : hex;\n      })\n      .join(\"\")\n  );\n}\n\nfunction formatRgb(rgbColor: RgbColor): string {\n  return [rgbColor.red, rgbColor.green, rgbColor.blue].join(\", \");\n}\n\ntype CmykColor = {\n  cyan: number;\n  magenta: number;\n  yellow: number;\n  black: number;\n};\n\nfunction rgbToCmyk(rgbColor: RgbColor): CmykColor {\n  const c = 1 - rgbColor.red / 255;\n  const m = 1 - rgbColor.green / 255;\n  const y = 1 - rgbColor.blue / 255;\n  const k = Math.min(c, m, y);\n  return {\n    cyan: (c - k) / (1 - k),\n    magenta: (m - k) / (1 - k),\n    yellow: (y - k) / (1 - k),\n    black: k,\n  };\n}\n\nfunction formatCmyk(cmykColor: CmykColor): string {\n  return [\n    Math.round(cmykColor.cyan * 100),\n    Math.round(cmykColor.magenta * 100),\n    Math.round(cmykColor.yellow * 100),\n    Math.round(cmykColor.black * 100),\n  ].join(\", \");\n}\n\nfunction rgbToHsl(rgbColor: RgbColor): HslColor {\n  const r = rgbColor.red / 255;\n  const g = rgbColor.green / 255;\n  const b = rgbColor.blue / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  if (max === min) {\n    return { hue: 0, saturation: 0, lightness: l };\n  }\n  const d = max - min;\n  const s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n  let h;\n  switch (max) {\n    case r:\n      h = (g - b) / d + (g < b ? 6 : 0);\n      break;\n    case g:\n      h = (b - r) / d + 2;\n      break;\n    case b:\n      h = (r - g) / d + 4;\n      break;\n    default:\n      throw new Error(\"Unexpected max value\");\n  }\n  return { hue: h / 6, saturation: s, lightness: l };\n}\n\nfunction formatHsl(hslColor: HslColor): string {\n  return [\n    Math.round(hslColor.hue * 360),\n    Math.round(hslColor.saturation * 100),\n    Math.round(hslColor.lightness * 100),\n  ].join(\", \");\n}\n"],"names":["Styled","ColorDisplay","gap","down","Color","color","shadow","Swatch","SwatchColor","AccessibilityRating","AccessibilityRatingLabel","AccessibilityRatingResult","AccessibilityRatingIcon","_styled","FontAwesomeIcon","Properties","Property","PropertyLabel","PropertyValue","ColorDisplayAggregate","children","___EmotionJSX","formatRgbHex","rgbColor","red","green","blue","map","c","hex","toString","toUpperCase","length","join","formatRgb","rgbToCmyk","m","y","k","Math","min","cyan","magenta","yellow","black","rgbToHsl","r","g","b","max","l","hue","saturation","lightness","d","s","h","Error","colorProp","name","className","style","maybeRgbColor","parseToRgb","properties","label","value","cmykColor","round","hslColor","white","whiteContrast","meetsContrastGuidelines","blackContrast","accessibilityRatings","passes","AA","size","AALarge","backgroundColor","i","fgColor","key","icon","faCheck","faTimes","_ref4"],"sourceRoot":""}