"use strict";(self.webpackChunkjazevedo_me=self.webpackChunkjazevedo_me||[]).push([[498],{4063:function(e){e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var i,o,s;if(Array.isArray(t)){if((i=t.length)!=n.length)return!1;for(o=i;0!=o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((i=(s=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=i;0!=o--;)if(!Object.prototype.hasOwnProperty.call(n,s[o]))return!1;for(o=i;0!=o--;){var r=s[o];if(!e(t[r],n[r]))return!1}return!0}return t!=t&&n!=n}},192:function(e,t,n){n.r(t),n.d(t,{default:function(){return _}});var i=n(7294),o=n(4063),s=n.n(o),r=n(5785),l=n(9477);function a(){return"undefined"!=typeof window&&void 0!==window.console&&null!=window.console}function u(e,t){a()&&window.console.log("["+e+"] "+t)}function c(e,t){a()&&window.console.warn("["+e+"] "+t)}function d(e,t){a()&&window.console.error("["+e+"] "+t)}var h=n(9210);const f=new l.FM8(1,3.2),m=new l.FM8(2,2),p={left:-1,right:1,top:1,bottom:-1,near:-100,far:100};function v(e,t){return function(e){let{clientWidth:t,clientHeight:n,baseViewport:i}=e;const o=t/n,s=(i.right-i.left)/(i.top-i.bottom),r={...i};if(o<s){const e=i.top-i.bottom;r.left=-e*o/2,r.right=e*o/2}else{const e=i.right-i.left;r.top=e/o/2,r.bottom=-e/o/2}return r}({clientWidth:e,clientHeight:t,baseViewport:p})}let S=function(){function e(){this.onLoadCallback=null,this.onRenderCallback=null,this.colors=[e.DEFAULT_WAVE_COLOR],this.fallbackColor=e.DEFAULT_WAVE_COLOR,this.timeOffset=e.DEFAULT_INITIAL_TIME,this.subdivision=e.DEFAULT_SUBDIVISION,this.startPaused=!1,this.startAtTime=null,this.blendSource=e.DEFAULT_BLEND_SOURCE,this.noiseSource=e.DEFAULT_NOISE_SOURCE,this.extraUniforms={},this.deformNoiseFrequency=e.DEFAULT_DEFORM_NOISE_FREQUENCY,this.deformNoiseSpeed=e.DEFAULT_DEFORM_NOISE_SPEED,this.deformNoiseStrength=e.DEFAULT_DEFORM_NOISE_STRENGTH,this.deformNoiseScrollSpeed=e.DEFAULT_DEFORM_NOISE_SCROLL_SPEED,this.deformNoiseClampLow=e.DEFAULT_DEFORM_NOISE_CLAMP_LOW,this.deformNoiseClampHigh=e.DEFAULT_DEFORM_NOISE_CLAMP_HIGH,this.lightNoiseFrequency=e.DEFAULT_LIGHT_NOISE_FREQUENCY,this.lightNoiseSpeed=e.DEFAULT_LIGHT_NOISE_SPEED,this.lightNoiseScrollSpeed=e.DEFAULT_LIGHT_NOISE_SCROLL_SPEED,this.lightNoiseClampLow=e.DEFAULT_LIGHT_NOISE_CLAMP_LOW,this.lightNoiseClampHigh=e.DEFAULT_LIGHT_NOISE_CLAMP_HIGH,this.lightBlendStrength=e.DEFAULT_LIGHT_BLEND_STRENGTH,this.perLightNoiseOffset=e.DEFAULT_PER_LIGHT_NOISE_OFFSET,this.state={type:"unmounted"}}var t=e.prototype;return t.setOnLoad=function(e){this.onLoadCallback=e},t.setOnRender=function(e){this.onRenderCallback=e},t.setColors=function(e){let t=e.slice();t.length>h.Z1&&(c("WaveRenderer","Too many colors provided ("+t.length+"). Only the first "+h.Z1+" will be used."),t=t.slice(0,h.Z1)),this.colors=t,"mounted"===this.state.type&&(this.state.material.uniforms.inLights.value=this.getLightsUniformValue(),this.invalidateIfPaused())},t.setFallbackColor=function(t){this.fallbackColor=null!=t?t:e.DEFAULT_WAVE_COLOR,"mounted"===this.state.type&&(this.state.renderer.setClearColor(g(this.fallbackColor)),this.invalidateIfPaused())},t.setTimeOffset=function(t){this.timeOffset=null!=t?t:e.DEFAULT_INITIAL_TIME,this.invalidateIfPaused()},t.setSubdivision=function(t){this.subdivision=null!=t?t:e.DEFAULT_SUBDIVISION,"mounted"===this.state.type&&(this.state.plane.geometry.dispose(),this.state.plane.geometry=this.createPlaneGeometry(),this.invalidateIfPaused())},t.setIsPaused=function(e){if(this.startPaused=null!=e&&e,"mounted"===this.state.type)if("paused"!==this.state.playbackState.type||e){if("playing"===this.state.playbackState.type&&e){const e=performance.now();this.state.playbackState={type:"paused",pauseTime:(e-this.state.playbackState.startTimestamp)/1e3,forceRerenderNextFrame:!0}}}else{const e=performance.now();this.state.playbackState={type:"playing",startTimestamp:e-1e3*this.state.playbackState.pauseTime,frameCount:1}}},t.setNoiseSource=function(t){this.noiseSource=null!=t?t:e.DEFAULT_NOISE_SOURCE,"mounted"===this.state.type&&(this.state.material.vertexShader=(0,h.lI)({noiseSource:this.noiseSource,blendSource:this.blendSource}),this.state.material.needsUpdate=!0,this.invalidateIfPaused())},t.setBlendSource=function(t){this.blendSource=null!=t?t:e.DEFAULT_BLEND_SOURCE,"mounted"===this.state.type&&(this.state.material.vertexShader=(0,h.lI)({noiseSource:this.noiseSource,blendSource:this.blendSource}),this.state.material.needsUpdate=!0,this.invalidateIfPaused())},t.setExtraUniforms=function(e){const t=new Set(Object.keys(this.extraUniforms));if(this.extraUniforms=null!=e?e:{},"mounted"===this.state.type){if(((e,t)=>e.size===t.size&&(0,r.Z)(e).every((e=>t.has(e))))(t,new Set(Object.keys(this.extraUniforms)))){const{material:e}=this.state;Object.entries(this.extraUniforms).forEach((t=>{let[n,i]=t;e.uniforms[n].value=i.value}))}else Object.assign(this.state.material.uniforms,this.extraUniforms),this.state.material.needsUpdate=!0;this.invalidateIfPaused()}},t.setDeformNoiseFrequency=function(t){this.deformNoiseFrequency=null!=t?t:e.DEFAULT_DEFORM_NOISE_FREQUENCY,"mounted"===this.state.type&&(this.state.material.uniforms.inDeformNoiseFrequency.value=this.getDeformNoiseFrequency(),this.invalidateIfPaused())},t.setDeformNoiseSpeed=function(t){this.deformNoiseSpeed=null!=t?t:e.DEFAULT_DEFORM_NOISE_SPEED,"mounted"===this.state.type&&(this.state.material.uniforms.inDeformNoiseSpeed.value=this.getDeformNoiseSpeed(),this.invalidateIfPaused())},t.setDeformNoiseStrength=function(t){this.deformNoiseStrength=null!=t?t:e.DEFAULT_DEFORM_NOISE_STRENGTH,"mounted"===this.state.type&&(this.state.material.uniforms.inDeformNoiseStrength.value=this.getDeformNoiseStrength(),this.invalidateIfPaused())},t.setDeformNoiseScrollSpeed=function(t){this.deformNoiseScrollSpeed=null!=t?t:e.DEFAULT_DEFORM_NOISE_SCROLL_SPEED,"mounted"===this.state.type&&(this.state.material.uniforms.inDeformNoiseScrollSpeed.value=this.getDeformNoiseScrollSpeed(),this.invalidateIfPaused())},t.setDeformNoiseClampLow=function(t){this.deformNoiseClampLow=null!=t?t:e.DEFAULT_DEFORM_NOISE_CLAMP_LOW,"mounted"===this.state.type&&(this.state.material.uniforms.inDeformNoiseClampLow.value=this.deformNoiseClampLow,this.invalidateIfPaused())},t.setDeformNoiseClampHigh=function(t){this.deformNoiseClampHigh=null!=t?t:e.DEFAULT_DEFORM_NOISE_CLAMP_HIGH,"mounted"===this.state.type&&(this.state.material.uniforms.inDeformNoiseClampHigh.value=this.deformNoiseClampHigh,this.invalidateIfPaused())},t.setLightNoiseFrequency=function(t){this.lightNoiseFrequency=null!=t?t:e.DEFAULT_LIGHT_NOISE_FREQUENCY,"mounted"===this.state.type&&(this.state.material.uniforms.inLightNoiseFrequency.value=this.getLightNoiseFrequency(),this.invalidateIfPaused())},t.setLightNoiseSpeed=function(t){this.lightNoiseSpeed=null!=t?t:e.DEFAULT_LIGHT_NOISE_SPEED,"mounted"===this.state.type&&(this.state.material.uniforms.inLightNoiseSpeed.value=this.getLightNoiseSpeed(),this.invalidateIfPaused())},t.setLightNoiseScrollSpeed=function(t){this.lightNoiseScrollSpeed=null!=t?t:e.DEFAULT_LIGHT_NOISE_SCROLL_SPEED,"mounted"===this.state.type&&(this.state.material.uniforms.inLightNoiseScrollSpeed.value=this.getLightNoiseScrollSpeed(),this.invalidateIfPaused())},t.setLightNoiseClampLow=function(t){this.lightNoiseClampLow=null!=t?t:e.DEFAULT_LIGHT_NOISE_CLAMP_LOW,"mounted"===this.state.type&&(this.state.material.uniforms.inLightNoiseClampLow.value=this.lightNoiseClampLow,this.invalidateIfPaused())},t.setLightNoiseClampHigh=function(t){this.lightNoiseClampHigh=null!=t?t:e.DEFAULT_LIGHT_NOISE_CLAMP_HIGH,"mounted"===this.state.type&&(this.state.material.uniforms.inLightNoiseClampHigh.value=this.lightNoiseClampHigh,this.invalidateIfPaused())},t.setLightBlendStrength=function(t){this.lightBlendStrength=null!=t?t:e.DEFAULT_LIGHT_BLEND_STRENGTH,"mounted"===this.state.type&&(this.state.material.uniforms.inLightBlendStrength.value=this.lightBlendStrength,this.invalidateIfPaused())},t.setPerLightNoiseOffset=function(t){this.perLightNoiseOffset=null!=t?t:e.DEFAULT_PER_LIGHT_NOISE_OFFSET,"mounted"===this.state.type&&(this.state.material.uniforms.inPerLightNoiseOffset.value=this.perLightNoiseOffset,this.invalidateIfPaused())},t.mount=function(e){let{canvas:t}=e;const n=new l.xsS,{clientWidth:i,clientHeight:o}=t,s=v(i,o),r=(a=s,new l.iKG(a.left,a.right,a.top,a.bottom,a.near,a.far));var a;r.name="main-camera",n.add(r);const u=new l.CP7({canvas:t,antialias:!0});u.setSize(i,o,!1),u.setPixelRatio(window.devicePixelRatio),u.setClearColor(g(this.fallbackColor));const{plane:c,material:d}=this.setupScene({scene:n}),h=this.onResizeWindow.bind(this);let f;if(window.addEventListener("resize",h),this.startPaused){var m;f={type:"paused",pauseTime:null!==(m=this.startAtTime)&&void 0!==m?m:0,forceRerenderNextFrame:!0}}else{var p;f={type:"playing",startTimestamp:performance.now()-1e3*(null!==(p=this.startAtTime)&&void 0!==p?p:0),frameCount:1}}const S=new L(this.render.bind(this));this.state={type:"mounted",canvas:t,boundOnResizeWindow:h,camera:r,renderer:u,scene:n,plane:c,material:d,playbackState:f,frameCount:1,renderStopWrapper:S},null!=this.onLoadCallback&&this.onLoadCallback(),S.start()},t.unmount=function(){"unmounted"!==this.state.type?(window.removeEventListener("resize",this.state.boundOnResizeWindow),this.state.material.dispose(),this.state.renderer.dispose(),this.state.renderStopWrapper.stop(),this.state={type:"unmounted"}):d("WaveRenderer","Cannot unmount when already unmounted")},t.restartAnimation=function(){if("unmounted"!==this.state.type)if("playing"===this.state.playbackState.type){const e=performance.now();this.state.playbackState={type:"playing",startTimestamp:e,frameCount:1}}else this.state.playbackState={type:"paused",pauseTime:0,forceRerenderNextFrame:!0};else d("WaveRenderer","Cannot restart animation when unmounted")},t.exportImage=function(e){if("unmounted"===this.state.type)return d("WaveRenderer","Cannot export image when unmounted"),"";this.state.material.uniforms.inTime.value=this.getTime()+this.timeOffset,this.state.renderer.render(this.state.scene,this.state.camera);return this.state.canvas.toDataURL(e)},t.createMaterial=function(){return new l.jyz({uniforms:{inTime:{value:0},inDeformNoiseFrequency:{value:this.getDeformNoiseFrequency()},inDeformNoiseSpeed:{value:this.getDeformNoiseSpeed()},inDeformNoiseStrength:{value:this.getDeformNoiseStrength()},inDeformNoiseScrollSpeed:{value:this.getDeformNoiseScrollSpeed()},inDeformNoiseClampLow:{value:this.deformNoiseClampLow},inDeformNoiseClampHigh:{value:this.deformNoiseClampHigh},inLights:{value:this.getLightsUniformValue()},inLightNoiseFrequency:{value:this.getLightNoiseFrequency()},inLightNoiseSpeed:{value:this.getLightNoiseSpeed()},inLightNoiseScrollSpeed:{value:this.getLightNoiseScrollSpeed()},inLightNoiseClampLow:{value:this.lightNoiseClampLow},inLightNoiseClampHigh:{value:this.lightNoiseClampHigh},inLightBlendStrength:{value:this.lightBlendStrength},inPerLightNoiseOffset:{value:this.perLightNoiseOffset},...this.extraUniforms},vertexShader:(0,h.lI)({noiseSource:this.noiseSource,blendSource:this.blendSource}),fragmentShader:(0,h.gl)()})},t.setupScene=function(e){let{scene:t}=e;const n=this.createPlaneGeometry(),i=this.createMaterial(),o=new l.Kj0(n,i);return o.rotation.x=Math.PI/2*.75,t.add(o),{plane:o,material:i}},t.createPlaneGeometry=function(){const e=new l.FM8(f.x*m.x,f.y*m.x),t=N(this.subdivision),n=new l.FM8(Math.ceil(t.x*f.x),Math.ceil(t.y*f.y));return new l._12(e.x,e.y,n.x,n.y)},t.getLightsUniformValue=function(){return{count:this.colors.length,colors:this.colors.map(g).concat(new Array(h.Z1-this.colors.length).fill(g({red:0,green:0,blue:0})))}},t.getDeformNoiseFrequency=function(){const e=N(this.deformNoiseFrequency);return new l.FM8(e.x*f.x,e.y*f.y)},t.getDeformNoiseSpeed=function(){return this.deformNoiseSpeed/100},t.getDeformNoiseStrength=function(){return this.deformNoiseStrength/10},t.getDeformNoiseScrollSpeed=function(){const e=N(this.deformNoiseScrollSpeed).multiplyScalar(.01);return new l.FM8(e.x*f.x,e.y*f.y)},t.getLightNoiseFrequency=function(){const e=N(this.lightNoiseFrequency);return new l.FM8(e.x*f.x,e.y*f.y)},t.getLightNoiseSpeed=function(){return this.lightNoiseSpeed/100},t.getLightNoiseScrollSpeed=function(){const e=N(this.lightNoiseScrollSpeed).multiplyScalar(.01);return new l.FM8(e.x*f.x,e.y*f.y)},t.render=function(e){if("unmounted"===this.state.type)return;const{playbackState:t}=this.state,n=this.getTime(e);if(null===n)throw new Error("Time should not be null");"paused"===t.type?t.forceRerenderNextFrame&&(t.forceRerenderNextFrame=!1,this.state.material.uniforms.inTime.value=n+this.timeOffset,this.state.renderer.render(this.state.scene,this.state.camera),null!==this.onRenderCallback&&this.onRenderCallback()):"playing"===t.type&&(t.frameCount%2!=1||(this.state.material.uniforms.inTime.value=n+this.timeOffset,this.state.renderer.render(this.state.scene,this.state.camera),null!==this.onRenderCallback&&this.onRenderCallback()),t.frameCount+=1)},t.getTime=function(e){var t;if("unmounted"===this.state.type)return null!==(t=this.startAtTime)&&void 0!==t?t:0;const{playbackState:n}=this.state;if("paused"===n.type)return n.pauseTime;if("playing"===n.type){return((null!=e?e:performance.now())-n.startTimestamp)/1e3}throw new Error("Unexpected playback state")},t.seekToTime=function(e){if("unmounted"===this.state.type)return void(this.startAtTime=e);const{playbackState:t}=this.state;"playing"===t.type?t.startTimestamp=performance.now()-1e3*e:"paused"===t.type&&(t.pauseTime=e)},t.invalidateIfPaused=function(){if("unmounted"===this.state.type)return;const{playbackState:e}=this.state;"paused"===e.type&&(e.forceRerenderNextFrame=!0)},t.onResizeWindow=function(){if("unmounted"===this.state.type)return void c("WaveRenderer","Cannot resize when unmounted (ignoring)");const{clientWidth:e,clientHeight:t}=this.state.canvas,n=v(e,t);var i,o;i=this.state.camera,o=n,i.left=o.left,i.right=o.right,i.top=o.top,i.bottom=o.bottom,i.near=o.near,i.far=o.far,i.updateProjectionMatrix(),this.state.renderer.setSize(e,t,!1),this.invalidateIfPaused()},e}();function g(e){return new l.Ilk(e.red/255,e.green/255,e.blue/255)}function N(e){return"number"==typeof e?new l.FM8(e,e):new l.FM8(e[0],e[1])}S.DEFAULT_WAVE_COLOR={red:0,green:0,blue:0},S.DEFAULT_INITIAL_TIME=0,S.DEFAULT_SUBDIVISION=64,S.DEFAULT_BLEND_SOURCE="#define GLSLIFY 1\n// clang-format off\nvec3 blendNormal(vec3 base, vec3 blend) {\n\treturn blend;\n}\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n\treturn (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// clang-format on\n\nvec3 blendFunc(vec3 bg, vec3 fg, float alpha) {\n  return blendNormal(bg, fg, alpha);\n}\n",S.DEFAULT_NOISE_SOURCE="#define GLSLIFY 1\n// clang-format off\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n// clang-format on\n\nfloat noiseFunc(vec3 v) { return snoise(v); }\n",S.DEFAULT_DEFORM_NOISE_FREQUENCY=2,S.DEFAULT_DEFORM_NOISE_SPEED=6,S.DEFAULT_DEFORM_NOISE_STRENGTH=2,S.DEFAULT_DEFORM_NOISE_SCROLL_SPEED=[2.5,1],S.DEFAULT_DEFORM_NOISE_CLAMP_LOW=-1,S.DEFAULT_DEFORM_NOISE_CLAMP_HIGH=1,S.DEFAULT_LIGHT_NOISE_FREQUENCY=1,S.DEFAULT_LIGHT_NOISE_SPEED=3,S.DEFAULT_LIGHT_NOISE_SCROLL_SPEED=[2.5,1],S.DEFAULT_LIGHT_NOISE_CLAMP_LOW=-.5,S.DEFAULT_LIGHT_NOISE_CLAMP_HIGH=1,S.DEFAULT_LIGHT_BLEND_STRENGTH=1,S.DEFAULT_PER_LIGHT_NOISE_OFFSET=8;let L=function(){function e(e){this.rendering=!1,this.renderCallback=e}var t=e.prototype;return t.start=function(){this.rendering=!0,window.requestAnimationFrame(this.renderAndScheduleNext.bind(this))},t.stop=function(){this.rendering=!1},t.renderAndScheduleNext=function(e){this.rendering&&(this.renderCallback(e),window.requestAnimationFrame(this.renderAndScheduleNext.bind(this)))},e}();var E=n(917);function y(e,t){const n=(0,i.useRef)(t);(0,i.useEffect)((()=>{const i=t;if(!s()(n.current,i))return n.current=i,e()}),t)}var _=(0,i.forwardRef)(((e,t)=>{let{colors:n,fallbackColor:o,onLoad:s,onRender:r,timeOffset:l,subdivision:a,isPaused:h,customNoiseSource:f,customBlendSource:m,customUniforms:p,deformNoiseFrequency:v,deformNoiseSpeed:g,deformNoiseStrength:N,deformNoiseScrollSpeed:L,deformNoiseClampLow:_,deformNoiseClampHigh:C,lightNoiseFrequency:D,lightNoiseSpeed:x,lightNoiseScrollSpeed:F,lightNoiseClampLow:T,lightNoiseClampHigh:O,lightBlendStrength:I,perLightNoiseOffset:b,className:w,style:A}=e;const U=(0,i.useRef)(null),R=(0,i.useRef)(null);(0,i.useImperativeHandle)(t,(()=>({canvasRef:U,rendererRef:R})));const P=e=>{if(null!=R.current)return e()};return y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setColors(n)}))),[n]),y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setFallbackColor(o)}))),[o]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setOnLoad(null!=s?s:null)}))),[s]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setOnRender(null!=r?r:null)}))),[r]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setTimeOffset(null!=l?l:null)}))),[l]),y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setSubdivision(null!=a?a:null)}))),[a]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setIsPaused(null!=h?h:null)}))),[h]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setNoiseSource(null!=f?f:null)}))),[f]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setBlendSource(null!=m?m:null)}))),[m]),y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setExtraUniforms(null!=p?p:null)}))),[p]),y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setDeformNoiseFrequency(null!=v?v:null)}))),[v]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setDeformNoiseSpeed(null!=g?g:null)}))),[g]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setDeformNoiseStrength(null!=N?N:null)}))),[N]),y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setDeformNoiseScrollSpeed(null!=L?L:null)}))),[L]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setDeformNoiseClampLow(null!=_?_:null)}))),[_]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setDeformNoiseClampHigh(null!=C?C:null)}))),[C]),y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setLightNoiseFrequency(null!=D?D:null)}))),[D]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setLightNoiseSpeed(null!=x?x:null)}))),[x]),y((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setLightNoiseScrollSpeed(null!=F?F:null)}))),[F]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setLightNoiseClampLow(null!=T?T:null)}))),[T]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setLightNoiseClampHigh(null!=O?O:null)}))),[O]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setLightBlendStrength(null!=I?I:null)}))),[I]),(0,i.useEffect)((()=>P((()=>{var e;return null===(e=R.current)||void 0===e?void 0:e.setPerLightNoiseOffset(null!=b?b:null)}))),[b]),(0,i.useEffect)((()=>{if(null===U.current)return void d("WaveCanvas","canvasRef.current is null in init");const e=new S;e.setOnLoad(null!=s?s:null),e.setOnRender(null!=r?r:null),e.setColors(n),e.setFallbackColor(o),e.setTimeOffset(null!=l?l:null),e.setSubdivision(null!=a?a:null),e.setIsPaused(null!=h?h:null),e.setNoiseSource(null!=f?f:null),e.setBlendSource(null!=m?m:null),e.setExtraUniforms(null!=p?p:null),e.setDeformNoiseFrequency(null!=v?v:null),e.setDeformNoiseSpeed(null!=g?g:null),e.setDeformNoiseStrength(null!=N?N:null),e.setDeformNoiseScrollSpeed(null!=L?L:null),e.setDeformNoiseClampLow(null!=_?_:null),e.setDeformNoiseClampHigh(null!=C?C:null),e.setLightNoiseFrequency(null!=D?D:null),e.setLightNoiseSpeed(null!=x?x:null),e.setLightNoiseScrollSpeed(null!=F?F:null),e.setLightNoiseClampLow(null!=T?T:null),e.setLightNoiseClampHigh(null!=O?O:null),e.setLightBlendStrength(null!=I?I:null),e.setPerLightNoiseOffset(null!=b?b:null),R.current=e;const t=()=>{null!==R.current?null!==U.current?(u("WaveCanvas","Mounting renderer"),R.current.mount({canvas:U.current})):c("WaveCanvas","canvasRef.current was null in deferred init"):c("WaveCanvas","rendererRef.current was null in deferred init")};return"requestIdleCallback"in window?window.requestIdleCallback(t,{timeout:1e3}):window.setTimeout(t,200),()=>{null!==R.current?(u("WaveCanvas","Unmounting renderer"),R.current.unmount(),R.current=null):c("WaveCanvas","rendererRef.current was null in unmount")}}),[]),(0,E.tZ)("canvas",{ref:U,className:w,style:A})}))},9210:function(e,t,n){n.d(t,{Z1:function(){return i},gl:function(){return s},lI:function(){return o}});const i=8;function o(e){let{noiseSource:t,blendSource:n}=e;return"\n    "+t+"\n    "+n+"\n    #define GLSLIFY 1\n// blendFunc and noiseFunc are linked when constructing the shader\n\n// Struct must stay in sync with `LightStruct` in ./index.ts\nstruct LightStruct {\n  int count;\n  // Size of the array must stay in sync with `MAX_LIGHTS` in ./index.ts\n  vec3 colors[8];\n};\n\nuniform float inTime;\nuniform vec2 inDeformNoiseFrequency;\nuniform float inDeformNoiseSpeed;\nuniform vec2 inDeformNoiseScrollSpeed;\nuniform float inDeformNoiseStrength;\nuniform float inDeformNoiseClampLow;\nuniform float inDeformNoiseClampHigh;\nuniform LightStruct inLights;\nuniform vec2 inLightNoiseFrequency;\nuniform float inLightNoiseSpeed;\nuniform vec2 inLightNoiseScrollSpeed;\nuniform float inLightNoiseClampLow;\nuniform float inLightNoiseClampHigh;\nuniform float inLightBlendStrength;\nuniform float inPerLightNoiseOffset;\n\nvarying vec3 outColor;\n\nvoid main() {\n  // Compute the deformed position using Simplex noise.\n  vec2 noiseSpaceCoord =\n      (uv * inDeformNoiseFrequency) + (inTime * inDeformNoiseScrollSpeed);\n  float noiseTimeCoord = inTime * inDeformNoiseSpeed;\n  vec3 noiseCoord = vec3(noiseSpaceCoord, noiseTimeCoord);\n  float clampedNoise = clamp(noiseFunc(noiseCoord), inDeformNoiseClampLow,\n                             inDeformNoiseClampHigh);\n  float zOffset = clampedNoise * inDeformNoiseStrength;\n  vec3 deformedPosition = vec3(position.x, position.y, position.z + zOffset);\n\n  // Compute the blended color from the lights. Each light is applied using\n  // a Simplex noise mask, and then blended together. Each light has its own\n  // noise-space coordinate, so that the mask is different for each light.\n  vec3 blendedColor = inLights.colors[0];\n  for (int i = 1; i < inLights.count; i++) {\n    vec2 noiseSpaceCoordOffset = vec2(float(i) * inPerLightNoiseOffset);\n    vec2 noiseSpaceCoord = (uv * inLightNoiseFrequency) +\n                           (inTime * inLightNoiseScrollSpeed) +\n                           noiseSpaceCoordOffset;\n    float noiseTimeCoordOffset = float(i) * inPerLightNoiseOffset;\n    float noiseTimeCoord = (inTime * inLightNoiseSpeed) + noiseTimeCoordOffset;\n    vec3 noiseCoord = vec3(noiseSpaceCoord, noiseTimeCoord);\n    float clampedNoise = clamp(noiseFunc(noiseCoord), inLightNoiseClampLow,\n                               inLightNoiseClampHigh);\n    vec3 lightColor = inLights.colors[i];\n    blendedColor = blendFunc(blendedColor, lightColor,\n                             clampedNoise * inLightBlendStrength);\n  }\n\n  gl_Position =\n      projectionMatrix * modelViewMatrix * vec4(deformedPosition, 1.0);\n  outColor = blendedColor;\n}\n\n  "}function s(){return"#define GLSLIFY 1\nvarying vec3 outColor;\n\nvoid main() {\n  gl_FragColor = vec4(outColor, 1.0);\n}\n"}}}]);
//# sourceMappingURL=82faba8da9409ec0c9c801a624ca743cb7a619f0-01b9ec51eb87090e1cee.js.map